<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.4.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="UCL_User_Leave_JMeter_Scripts" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="abs_dir_path" elementType="Argument">
            <stringProp name="Argument.name">abs_dir_path</stringProp>
            <stringProp name="Argument.value">D:/apache-jmeter-5.4.3/csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="auth_dir_rel_path" elementType="Argument">
            <stringProp name="Argument.name">auth_dir_rel_path</stringProp>
            <stringProp name="Argument.value">/authDetails/</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="user_creds_csv" elementType="Argument">
            <stringProp name="Argument.name">user_creds_csv</stringProp>
            <stringProp name="Argument.value">user_login_parms.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="line_manager_creds_csv" elementType="Argument">
            <stringProp name="Argument.name">line_manager_creds_csv</stringProp>
            <stringProp name="Argument.value">line_manager_login_parms.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="user_tokens_csv_path" elementType="Argument">
            <stringProp name="Argument.name">user_tokens_csv_path</stringProp>
            <stringProp name="Argument.value">user_tokens.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="line_manager_tokens_csv" elementType="Argument">
            <stringProp name="Argument.name">line_manager_tokens_csv</stringProp>
            <stringProp name="Argument.value">line_manager_tokens.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="sso_user_login_page_time" elementType="Argument">
            <stringProp name="Argument.name">sso_user_login_page_time</stringProp>
            <stringProp name="Argument.value">60000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="sso_ucl_redirect_login_time" elementType="Argument">
            <stringProp name="Argument.name">sso_ucl_redirect_login_time</stringProp>
            <stringProp name="Argument.value">120000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="sso_user_pwd_page_time" elementType="Argument">
            <stringProp name="Argument.name">sso_user_pwd_page_time</stringProp>
            <stringProp name="Argument.value">10000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="application_url" elementType="Argument">
            <stringProp name="Argument.name">application_url</stringProp>
            <stringProp name="Argument.value">https://app-dev.ucl.ac.uk/InsideUCL/authtesting</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="leave_uri" elementType="Argument">
            <stringProp name="Argument.name">leave_uri</stringProp>
            <stringProp name="Argument.value">/dev/staff/v0.2/staff</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="server" elementType="Argument">
            <stringProp name="Argument.name">server</stringProp>
            <stringProp name="Argument.value">api-uat.ucl.ac.uk</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ppsd_leave_rel_path" elementType="Argument">
            <stringProp name="Argument.name">ppsd_leave_rel_path</stringProp>
            <stringProp name="Argument.value">/PaidPublicSerivceDuty/</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="abs_result_path" elementType="Argument">
            <stringProp name="Argument.name">abs_result_path</stringProp>
            <stringProp name="Argument.value">D:\\apache-jmeter-5.4.3\\Results\\</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="chrome_drive_path" elementType="Argument">
            <stringProp name="Argument.name">chrome_drive_path</stringProp>
            <stringProp name="Argument.value">D:\\chromedriver_win32\\chromedriver.exe</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="UserTokens_Dynamic_Fetch" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler- load CSV to get Line Count" enabled="true">
          <stringProp name="BeanShellSampler.query">import java.text.*;
import java.io.*;
import java.util.*;

String temp = null;

ArrayList lines = new ArrayList();

BufferedReader bufRdr;

ArrayList strList = new ArrayList();     

// get the file
try {
	filePath = vars.get(&quot;abs_dir_path&quot;)+vars.get(&quot;auth_dir_rel_path&quot;)+vars.get(&quot;user_creds_csv&quot;);
	log.info(&quot;FilePath::&quot;+filePath);

	File file = new File(filePath);
     if (!file.exists()) {
        throw new Exception (&quot;ERROR: file -&gt; &quot; + file + &quot;&lt;- not found. Not able to load User Tokens&quot;);
    }

    bufRdr = new BufferedReader(new InputStreamReader(new FileInputStream(file), &quot;UTF8&quot;));
   
} catch(Exception e){
    log.error(&quot;failed to load file&quot;);
    log.error(e.getMessage());
    return;
}

// For each CSV line, save it to a variable
int counter = 0; int cnt =0;
while(true){
    try{
        temp = bufRdr.readLine();     
	 if(temp == null || temp.equals(&quot;&lt;EOF&gt;&quot;)){
            break;
         }

         cnt = temp.length()-1;     
         lines.add(temp.substring(0,cnt));
  //       vars.put(&quot;csv_line_&quot; + String.valueOf(counter), temp);
        counter++;
           

    } catch(Exception e){
        log.error(&quot;failed to get next line&quot;);
        log.error(e.getMessage());
        break;
    }
}
bufRdr.close();
log.info(&quot;USER-TOKEN(S)::&quot;+lines);

// store the number of CSV lines and data are for the loop counter
vars.put(&quot;linesCount&quot;, String.valueOf(lines.size()));

log.info(&quot;linesCount:&quot;+vars.get(&quot;linesCount&quot;));
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Getting Different User Tokens" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">${linesCount}</stringProp>
        </LoopController>
        <hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
            <stringProp name="delimiter">,</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="filename">${abs_dir_path}${auth_dir_rel_path}${user_creds_csv}</stringProp>
            <boolProp name="ignoreFirstLine">false</boolProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
            <boolProp name="stopThread">true</boolProp>
            <stringProp name="variableNames">username,password</stringProp>
          </CSVDataSet>
          <hashTree/>
          <com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.ChromeDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig" testname="jp@gc - Chrome Driver Config" enabled="true">
            <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>
            <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>
            <stringProp name="WebDriverConfig.http_host"></stringProp>
            <intProp name="WebDriverConfig.http_port">8080</intProp>
            <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>
            <stringProp name="WebDriverConfig.https_host"></stringProp>
            <intProp name="WebDriverConfig.https_port">8080</intProp>
            <stringProp name="WebDriverConfig.ftp_host"></stringProp>
            <intProp name="WebDriverConfig.ftp_port">8080</intProp>
            <stringProp name="WebDriverConfig.socks_host"></stringProp>
            <intProp name="WebDriverConfig.socks_port">8080</intProp>
            <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>
            <boolProp name="WebDriverConfig.maximize_browser">false</boolProp>
            <boolProp name="WebDriverConfig.reset_per_iteration">true</boolProp>
            <boolProp name="WebDriverConfig.dev_mode">false</boolProp>
            <stringProp name="ChromeDriverConfig.chromedriver_path">${chrome_drive_path}</stringProp>
            <boolProp name="ChromeDriverConfig.android_enabled">false</boolProp>
            <boolProp name="ChromeDriverConfig.headless_enabled">false</boolProp>
            <boolProp name="ChromeDriverConfig.insecurecerts_enabled">false</boolProp>
            <boolProp name="ChromeDriverConfig.incognito_enabled">false</boolProp>
            <boolProp name="ChromeDriverConfig.no_sandbox_enabled">false</boolProp>
          </com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig>
          <hashTree/>
          <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="Getting User Tokens" enabled="true">
            <stringProp name="WebDriverSampler.script">var pkg = JavaImporter(org.openqa.selenium);
var IoPkg = JavaImporter(java.io);
var vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables();
WDS.sampleResult.sampleStart();

var application_url = vars.get(&quot;application_url&quot;);
WDS.log.info(&apos;################################################################################&apos;);
WDS.log.info(&quot;Application is launching with URL:&quot;+application_url);
WDS.browser.get(application_url);//this should add to config file


WDS.log.info(&apos;################################################################################&apos;);
WDS.log.info(&apos;Application is waiting for OAuth2 to complete and Redirect to Microsoft&apos;);

WDS.log.info(&apos;USER:&apos;+WDS.args[0]);
WDS.log.info(&apos;Pa$w0rd:&apos;+WDS.args[1]);

var start = new Date().getTime()
var attempt = 1
while (new Date().getTime() - start &lt; vars.get(&quot;sso_user_login_page_time&quot;)) {
    try {
        var logout = WDS.browser.findElement(pkg.By.id(&apos;i0116&apos;));
        WDS.log.info(&apos;Username Element found&apos;);
        break
    }
    catch (err) {
        WDS.log.info(&apos;Attempt # &apos; + attempt + &apos;, username Element not found&apos;)
        java.lang.Thread.sleep(1000)
        attempt++
    }
}
WDS.browser.findElement(pkg.By.id(&apos;i0116&apos;)).sendKeys(WDS.args[0]);
WDS.browser.findElement(pkg.By.id(&apos;idSIButton9&apos;)).click();

WDS.log.info(&apos;Waiting for password field to load&apos;)
/*var start2 = new Date().getTime()
var attempt2 = 1
while (new Date().getTime() - start2 &lt; vars.get(&quot;sso_user_pwd_page_time&quot;)) {
    try {
        var logout = WDS.browser.findElement(pkg.By.id(&apos;i0118&apos;));
        WDS.log.info(&apos;Password Element found&apos;);
        break
    }
    catch (err) {
        WDS.log.info(&apos;Attempt # &apos; + attempt2 + &apos;, Password Element not found&apos;)
        java.lang.Thread.sleep(1000)
        attempt2++
    }
}*/
java.lang.Thread.sleep(3000);
WDS.browser.findElement(pkg.By.id(&apos;i0118&apos;)).sendKeys(WDS.args[1]);
WDS.browser.findElement(pkg.By.id(&apos;idSIButton9&apos;)).click();

WDS.log.info(&apos;Waiting for SIGN-IN field to load&apos;)
java.lang.Thread.sleep(2000);
WDS.browser.findElement(pkg.By.id(&apos;idSIButton9&apos;)).click();

WDS.log.info(&apos;Waiting for Authentication to Complete and redirect to UCL Page to Load...!&apos;)
var start1 = new Date().getTime()
var attempt1 = 1
while (new Date().getTime() - start1 &lt; vars.get(&quot;sso_ucl_redirect_login_time&quot;)) {
    try {
        var logout = WDS.browser.findElement(pkg.By.xpath(&quot;//*[@id=\&quot;b1-Content\&quot;]/div[1]/button&quot;));
        WDS.log.info(&apos;Generate Token Element found&apos;);
        break
    }
    catch (err) {
        WDS.log.info(&apos;Attempt # &apos; + attempt1 + &apos;, Generate Token Element not found&apos;)
        java.lang.Thread.sleep(1000)
        attempt1++
    }
}
WDS.browser.findElement(pkg.By.xpath(&quot;//*[@id=\&quot;b1-Content\&quot;]/div[1]/button&quot;)).click(); // Azure Token
WDS.browser.findElement(pkg.By.xpath(&quot;//*[@id=\&quot;b1-Content\&quot;]/div[5]/button&quot;)).click(); // WSo2 Token

WDS.log.info(&apos;Fethching Tokens...!&apos;)
java.lang.Thread.sleep(2000) 
var azure_token = WDS.browser.findElement(pkg.By.xpath(&quot;//*[@id=\&quot;b1-Content\&quot;]/div[2]/span&quot;));
var ws02_token = WDS.browser.findElement(pkg.By.xpath(&quot;//*[@id=\&quot;b1-Content\&quot;]/div[6]/span&quot;));

WDS.log.info(&apos;################################################################################&apos;);
WDS.log.info(&apos;Printing Tokens...!&apos;)
var azure_full_token = &apos;Bearer &apos;+azure_token.getText();
var ws02_full_token = ws02_token.getText();
WDS.log.info(&apos;AZURE Token=&apos;+azure_full_token);
WDS.log.info(&apos;WS02 Token=&apos;+ws02_full_token);

var vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables();
vars.put(&apos;AZURE_TOKEN&apos;,azure_full_token);
vars.put(&apos;WS02_TOKEN&apos;,ws02_full_token);
WDS.log.info(&quot;############################################################################&quot;);
azure_token =vars.get(&quot;AZURE_TOKEN&quot;);

var ws02_token = vars.get(&quot;WS02_TOKEN&quot;);
var cnt_type = &quot;application/json&quot;;
var com_seperator = &quot;,&quot;;

var temp = WDS.args[0];
var user_name = temp.substring(0,temp.indexOf(&quot;@&quot;));
WDS.log.info(&quot;username for applying leave:&quot;+user_name);
var tokens = ws02_token + com_seperator + azure_token + com_seperator + cnt_type + com_seperator + user_name;
WDS.log.info(&quot;############################################################################&quot;);
var user_token_path = vars.get(&quot;abs_dir_path&quot;)+vars.get(&quot;auth_dir_rel_path&quot;)+vars.get(&quot;user_tokens_csv_path&quot;);
WDS.log.info(&quot;PATH-USER-TOKENS-FILE:&quot;+user_token_path);
f = new IoPkg.FileOutputStream(user_token_path,true);
p = new IoPkg.PrintStream(f);
if(tokens.contains(&quot;Bearer&quot;)){
	p.print(tokens);
	p.print(&quot;\n&quot;);
	WDS.log.info(&quot;User Tokens FILEDATA-CSV:&quot;+tokens);
	WDS.log.info(&quot;############################################################################&quot;);
     WDS.log.info(&quot;User Tokens Written to FIle...!&quot;);
}

else
{
	WDS.log.info(&quot;No Tokens to write to File for User-Name:&quot;+user_name);
}
p.close();
f.close();
WDS.sampleResult.sampleEnd();
//WDS.browser.close();</stringProp>
            <stringProp name="WebDriverSampler.parameters">${username} ${password}</stringProp>
            <stringProp name="WebDriverSampler.language">javascript</stringProp>
          </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Linemanager_Tokens_Dynamic_Fetch" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler- load CSV to get Line Count" enabled="true">
          <stringProp name="BeanShellSampler.query">import java.text.*;
import java.io.*;
import java.util.*;

String temp = null;

ArrayList lines = new ArrayList();

BufferedReader bufRdr;

ArrayList strList = new ArrayList();     

// get the file
try {
	filePath = vars.get(&quot;abs_dir_path&quot;)+vars.get(&quot;auth_dir_rel_path&quot;)+vars.get(&quot;line_manager_creds_csv&quot;);
	log.info(&quot;FilePath::&quot;+filePath);

	File file = new File(filePath);
     if (!file.exists()) {
        throw new Exception (&quot;ERROR: file -&gt; &quot; + file + &quot;&lt;- not found: Not able to load LineManager Tokens&quot;);
    }

    bufRdr = new BufferedReader(new InputStreamReader(new FileInputStream(file), &quot;UTF8&quot;));
   
} catch(Exception e){
    log.error(&quot;failed to load file&quot;);
    log.error(e.getMessage());
    return;
}

// For each CSV line, save it to a variable
int counter = 0; int cnt =0;
while(true){
    try{
        temp = bufRdr.readLine();     
	 if(temp == null || temp.equals(&quot;&lt;EOF&gt;&quot;)){
            break;
         }

         cnt = temp.length()-1;     
         lines.add(temp.substring(0,cnt));
  //       vars.put(&quot;csv_line_&quot; + String.valueOf(counter), temp);
        counter++;
           

    } catch(Exception e){
        log.error(&quot;failed to get next line&quot;);
        log.error(e.getMessage());
        break;
    }
}
bufRdr.close();
log.info(&quot;LINE-MANAGER-TOKEN(S)::&quot;+lines);

// store the number of CSV lines and data are for the loop counter
vars.put(&quot;linesCount&quot;, String.valueOf(lines.size()));

log.info(&quot;linesCount:&quot;+vars.get(&quot;linesCount&quot;));
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Getting Different Line Manager Tokens" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">${linesCount}</stringProp>
        </LoopController>
        <hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
            <stringProp name="delimiter">,</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="filename">${abs_dir_path}${auth_dir_rel_path}${line_manager_creds_csv}</stringProp>
            <boolProp name="ignoreFirstLine">false</boolProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
            <boolProp name="stopThread">true</boolProp>
            <stringProp name="variableNames">username,password</stringProp>
          </CSVDataSet>
          <hashTree/>
          <com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.ChromeDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig" testname="jp@gc - Chrome Driver Config" enabled="true">
            <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>
            <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>
            <stringProp name="WebDriverConfig.http_host"></stringProp>
            <intProp name="WebDriverConfig.http_port">8080</intProp>
            <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>
            <stringProp name="WebDriverConfig.https_host"></stringProp>
            <intProp name="WebDriverConfig.https_port">8080</intProp>
            <stringProp name="WebDriverConfig.ftp_host"></stringProp>
            <intProp name="WebDriverConfig.ftp_port">8080</intProp>
            <stringProp name="WebDriverConfig.socks_host"></stringProp>
            <intProp name="WebDriverConfig.socks_port">8080</intProp>
            <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>
            <boolProp name="WebDriverConfig.maximize_browser">false</boolProp>
            <boolProp name="WebDriverConfig.reset_per_iteration">true</boolProp>
            <boolProp name="WebDriverConfig.dev_mode">false</boolProp>
            <stringProp name="ChromeDriverConfig.chromedriver_path">${chrome_drive_path}</stringProp>
            <boolProp name="ChromeDriverConfig.android_enabled">false</boolProp>
            <boolProp name="ChromeDriverConfig.headless_enabled">false</boolProp>
            <boolProp name="ChromeDriverConfig.insecurecerts_enabled">false</boolProp>
            <boolProp name="ChromeDriverConfig.incognito_enabled">false</boolProp>
            <boolProp name="ChromeDriverConfig.no_sandbox_enabled">false</boolProp>
          </com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig>
          <hashTree/>
          <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="Getting Line Manager Tokens" enabled="true">
            <stringProp name="WebDriverSampler.script">var pkg = JavaImporter(org.openqa.selenium);
var IoPkg = JavaImporter(java.io);
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait);
var vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables();
WDS.sampleResult.sampleStart();

var application_url = vars.get(&quot;application_url&quot;);
WDS.log.info(&apos;################################################################################&apos;);
WDS.log.info(&quot;Application is launching with URL:&quot;+application_url);
WDS.browser.get(application_url);//this should add to config file
WDS.log.info(&apos;################################################################################&apos;);
WDS.log.info(&apos;Application is waiting for OAuth2 to complete and Redirect to Microsoft&apos;);

WDS.log.info(&apos;USER:&apos;+WDS.args[0]);
WDS.log.info(&apos;Pa$w0rd:&apos;+WDS.args[1]);

var start = new Date().getTime()
var attempt = 1
while (new Date().getTime() - start &lt; vars.get(&quot;sso_user_login_page_time&quot;)) {
    try {
        var logout = WDS.browser.findElement(pkg.By.id(&apos;i0116&apos;));
        WDS.log.info(&apos;Element found&apos;);
        break
    }
    catch (err) {
        WDS.log.info(&apos;Attempt # &apos; + attempt + &apos;, Element not found&apos;)
        java.lang.Thread.sleep(1000)
        attempt++
    }
}
WDS.browser.findElement(pkg.By.id(&apos;i0116&apos;)).sendKeys(WDS.args[0]);
WDS.browser.findElement(pkg.By.id(&apos;idSIButton9&apos;)).click();

WDS.log.info(&apos;Waiting for password field to load&apos;)
/*var start2 = new Date().getTime()
var attempt2 = 1
while (new Date().getTime() - start2 &lt; vars.get(&quot;sso_user_pwd_page_time&quot;)) {
    try {
        var logout = WDS.browser.findElement(pkg.By.id(&apos;i0118&apos;));
        WDS.log.info(&apos;Element found&apos;);
        break
    }
    catch (err) {
        WDS.log.info(&apos;Attempt # &apos; + attempt2 + &apos;, Element not found&apos;)
        java.lang.Thread.sleep(1000)
        attempt2++
    }
}*/
java.lang.Thread.sleep(3000);
WDS.browser.findElement(pkg.By.id(&apos;i0118&apos;)).sendKeys(WDS.args[1]);
WDS.browser.findElement(pkg.By.id(&apos;idSIButton9&apos;)).click();

WDS.log.info(&apos;Waiting for SIGN-IN field to load&apos;)
java.lang.Thread.sleep(2000);
WDS.browser.findElement(pkg.By.id(&apos;idSIButton9&apos;)).click();

WDS.log.info(&apos;Waiting for Authentication to Complete and redirect to UCL Page to Load...!&apos;)
var start1 = new Date().getTime()
var attempt1 = 1
while (new Date().getTime() - start1 &lt; vars.get(&quot;sso_ucl_redirect_login_time&quot;)) {
    try {
        var logout = WDS.browser.findElement(pkg.By.xpath(&quot;//*[@id=\&quot;b1-Content\&quot;]/div[1]/button&quot;));
        WDS.log.info(&apos;Element found&apos;);
        break
    }
    catch (err) {
        WDS.log.info(&apos;Attempt # &apos; + attempt1 + &apos;, Element not found&apos;)
        java.lang.Thread.sleep(1000)
        attempt1++
    }
}
WDS.browser.findElement(pkg.By.xpath(&quot;//*[@id=\&quot;b1-Content\&quot;]/div[1]/button&quot;)).click(); // Azure Token
WDS.browser.findElement(pkg.By.xpath(&quot;//*[@id=\&quot;b1-Content\&quot;]/div[5]/button&quot;)).click(); // WSo2 Token

WDS.log.info(&apos;Fethching Line Mgr Tokens...!&apos;)
java.lang.Thread.sleep(2000) 
var azure_token = WDS.browser.findElement(pkg.By.xpath(&quot;//*[@id=\&quot;b1-Content\&quot;]/div[2]/span&quot;));
var ws02_token = WDS.browser.findElement(pkg.By.xpath(&quot;//*[@id=\&quot;b1-Content\&quot;]/div[6]/span&quot;));

WDS.log.info(&apos;################################################################################&apos;);
WDS.log.info(&apos;Printing Line Mgr Tokens...!&apos;)
var azure_full_token = &apos;Bearer &apos;+azure_token.getText();
var ws02_full_token = ws02_token.getText();
WDS.log.info(&apos;AZURE Token=&apos;+azure_full_token);
WDS.log.info(&apos;WS02 Token=&apos;+ws02_full_token);

var vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables();
vars.put(&apos;AZURE_TOKEN&apos;,azure_full_token);
vars.put(&apos;WS02_TOKEN&apos;,ws02_full_token);
WDS.log.info(&quot;############################################################################&quot;);
azure_token =vars.get(&quot;AZURE_TOKEN&quot;);

var ws02_token = vars.get(&quot;WS02_TOKEN&quot;);
var cnt_type = &quot;application/json&quot;;
var com_seperator = &quot;,&quot;;

var temp = WDS.args[0];
var lm_user_name = temp.substring(0,temp.indexOf(&quot;@&quot;));
WDS.log.info(&quot;username for LineManager:&quot;+lm_user_name);
var tokens = ws02_token + com_seperator + azure_token + com_seperator + cnt_type + com_seperator + lm_user_name;
WDS.log.info(&quot;############################################################################&quot;);
var lm_token_path = vars.get(&quot;abs_dir_path&quot;)+vars.get(&quot;auth_dir_rel_path&quot;)+vars.get(&quot;line_manager_tokens_csv&quot;);
WDS.log.info(&quot;PATH-LM-TOKENS-FILE:&quot;+lm_token_path);
f = new IoPkg.FileOutputStream(lm_token_path,true);
p = new IoPkg.PrintStream(f);
if(tokens.contains(&quot;Bearer&quot;)){
	p.print(tokens);
	p.print(&quot;\n&quot;);
	WDS.log.info(&quot;Line Manager Tokens FILEDATA-CSV:&quot;+tokens);
	WDS.log.info(&quot;############################################################################&quot;);
     WDS.log.info(&quot;Line Manager Tokens Written to FIle...!&quot;);
}
else
{
	WDS.log.info(&quot;No Tokens to write to File for LineManager:&quot;+lm_user_name);

}
p.close();
f.close();
WDS.sampleResult.sampleEnd();
//WDS.browser.close();</stringProp>
            <stringProp name="WebDriverSampler.parameters">${username} ${password}</stringProp>
            <stringProp name="WebDriverSampler.language">javascript</stringProp>
          </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="ApplyPaidPublicSerivceDutyLeave" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="applyLeavecsvFile" elementType="Argument">
              <stringProp name="Argument.name">applyLeavecsvFile</stringProp>
              <stringProp name="Argument.value">apply_ppsd_leave_params.csv</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="lines" elementType="Argument">
              <stringProp name="Argument.name">lines</stringProp>
              <stringProp name="Argument.value">${linesCount}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="userTokensCount" elementType="Argument">
              <stringProp name="Argument.name">userTokensCount</stringProp>
              <stringProp name="Argument.value">${usertokencount}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler- load CSV to get UserTokenCount" enabled="true">
          <stringProp name="BeanShellSampler.query">import java.text.*;
import java.io.*;
import java.util.*;

String temp = null;

ArrayList lines = new ArrayList();

BufferedReader bufRdr;

ArrayList strList = new ArrayList();     

// get the file
try {
	filePath = vars.get(&quot;abs_dir_path&quot;)+vars.get(&quot;auth_dir_rel_path&quot;)+vars.get(&quot;user_tokens_csv_path&quot;);
	log.info(&quot;FilePath::&quot;+filePath);

	File file = new File(filePath);
     if (!file.exists()) {
        throw new Exception (&quot;ERROR: file -&gt; &quot; + file + &quot;&lt;- not found: Not able to load  User Tokens for Applying Leave&quot;);
    }

    bufRdr = new BufferedReader(new InputStreamReader(new FileInputStream(file), &quot;UTF8&quot;));
   
} catch(Exception e){
    log.error(&quot;failed to load file&quot;);
    log.error(e.getMessage());
    return;
}

// For each CSV line, save it to a variable
int counter = 0; int cnt =0;
while(true){
    try{
        temp = bufRdr.readLine();     
	 if(temp == null || temp.equals(&quot;&lt;EOF&gt;&quot;)){
            break;
         }

         cnt = temp.length()-1;     
         lines.add(temp.substring(0,cnt));
  //       vars.put(&quot;csv_line_&quot; + String.valueOf(counter), temp);
        counter++;
           

    } catch(Exception e){
        log.error(&quot;failed to get next line&quot;);
        log.error(e.getMessage());
        break;
    }
}
bufRdr.close();
log.info(&quot;USER-TOKENS::&quot;+lines);

// store the number of CSV lines and data are for the loop counter
vars.put(&quot;usertokencount&quot;, String.valueOf(lines.size()));

log.info(&quot;usertokencount:&quot;+vars.get(&quot;usertokencount&quot;));
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler- load CSV to get apply leaves count" enabled="true">
          <stringProp name="TestPlan.comments">Getting count of the applied leaves </stringProp>
          <stringProp name="BeanShellSampler.query">import java.text.*;
import java.io.*;
import java.util.*;

String temp = null;

ArrayList lines = new ArrayList();

BufferedReader bufRdr;

ArrayList strList = new ArrayList();     

// get the file
try {
	filePath = vars.get(&quot;abs_dir_path&quot;)+vars.get(&quot;ppsd_leave_rel_path&quot;)+vars.get(&quot;applyLeavecsvFile&quot;);
	log.info(&quot;FilePath::&quot;+filePath);

	File file = new File(filePath);
     if (!file.exists()) {
        throw new Exception (&quot;ERROR: file -&gt; &quot; + file + &quot;&lt;- not found: NOT able to load APPLY LEAVE Params&quot;);
    }

    bufRdr = new BufferedReader(new InputStreamReader(new FileInputStream(file), &quot;UTF8&quot;));
   
} catch(Exception e){
    log.error(&quot;failed to load file&quot;);
    log.error(e.getMessage());
    return;
}

// For each CSV line, save it to a variable
int counter = 0; int cnt =0;
while(true){
    try{
        temp = bufRdr.readLine();     
	 if(temp == null || temp.equals(&quot;&lt;EOF&gt;&quot;)){
            break;
         }

         cnt = temp.length()-1;     
         lines.add(temp.substring(0,cnt));
  //       vars.put(&quot;csv_line_&quot; + String.valueOf(counter), temp);
        counter++;
           

    } catch(Exception e){
        log.error(&quot;failed to get next line&quot;);
        log.error(e.getMessage());
        break;
    }
}
bufRdr.close();
log.info(&quot;APPLY-LEAVE-PARAMS::&quot;+lines);

// store the number of CSV lines and data are for the loop counter
vars.put(&quot;linesCount&quot;, String.valueOf(lines.size()));

log.info(&quot;linesCount:&quot;+vars.get(&quot;linesCount&quot;));
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="script">import java.lang.Math;
         // define the range
        int max = 1000;  int min = 1; int range = max - min + 1; int rand = 0;
          // generate random numbers within 1 to 1000
        for (int i = 0; i &lt; 1000; i++) {rand = (int)(Math.random() * range) + min;}
//log.info(&quot;count::::::::::::::::::::::::::::::::::::::::::::::::&quot;+rand);

filepath = vars.get(&quot;abs_dir_path&quot;) + vars.get(&quot;ppsd_leave_rel_path&quot;);//&quot;D:\\apache-jmeter-5.4.3\\csv\\PaidPublicSerivceDuty\\&quot;;
fileName = &quot;apply_ppsd_leave_attn_ID_&quot;+ vars.get(&quot;userName&quot;) +&quot;.csv&quot;;
apply_atten_id_filePath = vars.get(&quot;abs_dir_path&quot;)+vars.get(&quot;ppsd_leave_rel_path&quot;) + fileName;
vars.put(&quot;apply_attn_id_csvPath&quot;,apply_atten_id_filePath);
//log.info(&quot;APPLY_LEAVE_FILE_NAME_ATTN_ID:&quot;+vars.get(&quot;apply_attn_id_csvPath&quot;));</stringProp>
        </BeanShellPreProcessor>
        <hashTree/>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="UserTokenLoop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">${usertokencount}</stringProp>
        </LoopController>
        <hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Tokens for User" enabled="true">
            <stringProp name="delimiter">,</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="filename">${abs_dir_path}${auth_dir_rel_path}${user_tokens_csv_path}</stringProp>
            <boolProp name="ignoreFirstLine">false</boolProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="variableNames">Authorization,auth-token,Content-Type,userName</stringProp>
          </CSVDataSet>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Auth-Tokens for User" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">${Authorization}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">auth-token</stringProp>
                <stringProp name="Header.value">${auth-token}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">${Content-Type}</stringProp>
              </elementProp>
            </collectionProp>
            <stringProp name="TestPlan.comments">This will hold Authorization &amp; auth-token</stringProp>
          </HeaderManager>
          <hashTree/>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="ApplyLeaveLoop Controller" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">${linesCount}</stringProp>
          </LoopController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ApplyLeave" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;absence_attendance_type_id&quot;: 69,&#xd;
  &quot;start_date&quot;: &quot;${start_date}&quot;,&#xd;
  &quot;end_date&quot;: &quot;${end_date}&quot;,&#xd;
  &quot;absence_attendance_reason_id&quot;: 81,&#xd;
  &quot;specific_assignment&quot;: &quot;102821&quot;,&#xd;
  &quot;half_day_on_start_date&quot;:&quot;NO&quot;,&#xd;
  &quot;half_day_on_end_date&quot;:&quot;NO&quot;,&#xd;
  &quot;comments_leave&quot;:&quot;Leave&quot;,&#xd;
  &quot;comments_approver&quot;: &quot;Please approver&quot;,&#xd;
  &quot;override_warning&quot;: &quot;Y&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${server}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${leave_uri}/${userName}/leave</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set applyParentalBereavementLeave params" enabled="true">
                <stringProp name="filename">${abs_dir_path}${ppsd_leave_rel_path}${applyLeavecsvFile}</stringProp>
                <stringProp name="fileEncoding"></stringProp>
                <stringProp name="variableNames">start_date,end_date</stringProp>
                <boolProp name="ignoreFirstLine">false</boolProp>
                <stringProp name="delimiter">,</stringProp>
                <boolProp name="quotedData">false</boolProp>
                <boolProp name="recycle">true</boolProp>
                <boolProp name="stopThread">false</boolProp>
                <stringProp name="shareMode">shareMode.all</stringProp>
              </CSVDataSet>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regex extr absence_attendance_id" enabled="true">
                <stringProp name="TestPlan.comments">trans_id will hold attendance ID from response</stringProp>
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">abs_attendance_id</stringProp>
                <stringProp name="RegexExtractor.regex">absence_attendance_id&quot;:(.+?),</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BshProc Write Attn ID" enabled="true">
                <stringProp name="TestPlan.comments">This will write trans_id to csv file</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">import java.lang.Math;

token_auth = vars.get(&quot;auth-token&quot;);
log.info(&quot;###################################################&quot;);
log.info(&quot;User-Token:&quot;+token_auth);

log.info(&quot;###################################################&quot;);

abs_attendance_id = vars.get(&quot;abs_attendance_id&quot;);

log.info(&quot;abs_attendance_id:&quot;+abs_attendance_id);
log.info(&quot;APPLY_LEAVE_FILE_NAME_ATTN_ID:&quot;+vars.get(&quot;apply_attn_id_csvPath&quot;));

f = new FileOutputStream(vars.get(&quot;apply_attn_id_csvPath&quot;),true);
p = new PrintStream(f);
this.interpreter.setOut(p);
if(!abs_attendance_id.equals(&quot;NOT FOUND&quot;))
{
	log.info(&quot;FETCHING ABS ATTN ID&apos;S:::INDSIDE LOOP....&quot;);
	print(abs_attendance_id+&quot;,&quot;);
	
}
f.close(); 

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response PaidPublicSerivceDuty Leave Status" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1446258828">201|409</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message">Apply PaidPublicSerivceDuty Leave Failed</stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
              <JSR223Listener guiclass="TestBeanGUI" testclass="JSR223Listener" testname="JSR223 Listener" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">import org.apache.jmeter.assertions.AssertionResult;
import java.text.SimpleDateFormat; 
import java.util.Date;
Date date = new Date(); 
SimpleDateFormat df  = new SimpleDateFormat(&quot;MM_dd_yyyy_HH_mm_ss&quot;); 
String formattedDate = df.format(date); 

FileWriter fstream = new FileWriter(vars.get(&quot;abs_result_path&quot;)+&quot;Apply_PaidPublicSerivceDuty_Leave_&quot;+formattedDate+&quot;.txt&quot;,true); 
BufferedWriter out = new BufferedWriter(fstream);

if(prev.isSuccessful())
{
	log.info(&quot;APPLY PaidPublicSerivceDuty LEAVE SUCCESSFULLL&quot;);
		prev.setResponseMessage(prev.getResponseDataAsString());
		resp_code = prev.getResponseCode();
		resp_message = resp_code + &quot;&lt;----&gt;&quot;+prev.getResponseDataAsString();
		log.info(&quot;response-code:&quot;+prev.getResponseCode());
		log.info(&quot;response-msg:&quot;+resp_message);
		out.write(resp_message);//insert new line
		out.write(System.getProperty(&quot;line.separator&quot;));//insert new line
	
} else {
	log.info(&quot;APPLY PaidPublicSerivceDuty LEAVE NOT SUCCESSFULLL&quot;);
	prev.setResponseMessage(prev.getResponseDataAsString());
     log.info(&quot;response-code:&quot;+prev.getResponseCode());
      AssertionResult[] assertionResults = prev.getAssertionResults();
      for (AssertionResult assertionResult : assertionResults) {
    if (assertionResult.isFailure()) {
        log.info(&quot;assertion is not successful&quot;);
        resp_code = prev.getResponseCode();
      	resp_message = resp_code + &quot;&lt;----&gt;&quot;+prev.getResponseDataAsString();
		log.info(&quot;response-code:&quot;+prev.getResponseCode());
		log.info(&quot;response-msg:&quot;+resp_message);
		out.write(resp_message);//insert new line
		out.write(System.getProperty(&quot;line.separator&quot;));//insert new line
        assertionResult.setFailureMessage(resp_message); // customise
    } 
}
}
out.close();
fstream.close(); 
</stringProp>
                <stringProp name="scriptLanguage">java</stringProp>
              </JSR223Listener>
              <hashTree/>
              <ResultCollector guiclass="AssertionVisualizer" testclass="ResultCollector" testname="Assertion Results" enabled="true">
                <boolProp name="ResultCollector.error_logging">false</boolProp>
                <objProp>
                  <name>saveConfig</name>
                  <value class="SampleSaveConfiguration">
                    <time>true</time>
                    <latency>true</latency>
                    <timestamp>true</timestamp>
                    <success>true</success>
                    <label>true</label>
                    <code>true</code>
                    <message>true</message>
                    <threadName>true</threadName>
                    <dataType>true</dataType>
                    <encoding>false</encoding>
                    <assertions>true</assertions>
                    <subresults>true</subresults>
                    <responseData>false</responseData>
                    <samplerData>false</samplerData>
                    <xml>false</xml>
                    <fieldNames>true</fieldNames>
                    <responseHeaders>false</responseHeaders>
                    <requestHeaders>false</requestHeaders>
                    <responseDataOnError>false</responseDataOnError>
                    <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                    <assertionsResultsToSave>0</assertionsResultsToSave>
                    <bytes>true</bytes>
                    <sentBytes>true</sentBytes>
                    <url>true</url>
                    <threadCounts>true</threadCounts>
                    <idleTime>true</idleTime>
                    <connectTime>true</connectTime>
                  </value>
                </objProp>
                <stringProp name="filename"></stringProp>
              </ResultCollector>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="ApplyPaidPublicSerivceDutyLeaveTaskNotification" enabled="false">
        <stringProp name="TestPlan.comments">Getting apply PaidPublicSerivceDuty leave task notification</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler- load CSV to get LineManager TokenCount" enabled="true">
          <stringProp name="BeanShellSampler.query">import java.text.*;
import java.io.*;
import java.util.*;

String temp = null;

ArrayList lines = new ArrayList();

BufferedReader bufRdr;

ArrayList strList = new ArrayList();     

// get the file
try {
	filePath = vars.get(&quot;abs_dir_path&quot;)+vars.get(&quot;auth_dir_rel_path&quot;)+vars.get(&quot;line_manager_creds_csv&quot;);
	log.info(&quot;FilePath::&quot;+filePath);

	File file = new File(filePath);
     if (!file.exists()) {
        throw new Exception (&quot;ERROR: file -&gt; &quot; + file + &quot;&lt;- not found: Not able to load Line Mgr Tokens for Working Off Site Leave Task Notification&quot;);
    }

    bufRdr = new BufferedReader(new InputStreamReader(new FileInputStream(file), &quot;UTF8&quot;));
   
} catch(Exception e){
    log.error(&quot;failed to load file&quot;);
    log.error(e.getMessage());
    return;
}

// For each CSV line, save it to a variable
int counter = 0; int cnt =0;
while(true){
    try{
        temp = bufRdr.readLine();     
	 if(temp == null || temp.equals(&quot;&lt;EOF&gt;&quot;)){
            break;
         }

         cnt = temp.length()-1;     
         lines.add(temp.substring(0,cnt));
  //       vars.put(&quot;csv_line_&quot; + String.valueOf(counter), temp);
        counter++;
           

    } catch(Exception e){
        log.error(&quot;failed to get next line&quot;);
        log.error(e.getMessage());
        break;
    }
}
bufRdr.close();
log.info(&quot;LM-TOKENS::&quot;+lines);

// store the number of CSV lines and data are for the loop counter
vars.put(&quot;lmtokencount&quot;, String.valueOf(lines.size()));

log.info(&quot;lmtokencount:&quot;+vars.get(&quot;lmtokencount&quot;));
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Line Manager Token Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">${lmtokencount}</stringProp>
        </LoopController>
        <hashTree>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="FetchingApplyPaidPublicSerivceDutyTaskNotificationLoopController" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">1</stringProp>
          </LoopController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetPaidPublicSerivceDutyTaskNotification" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="nid_type" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">TASKS</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">nid_type</stringProp>
                  </elementProp>
                  <elementProp name="status" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">OPEN</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">status</stringProp>
                  </elementProp>
                  <elementProp name="offset" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">offset</stringProp>
                  </elementProp>
                  <elementProp name="limit" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">50</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">limit</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${server}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${leave_uri}/${lm_user_name}/notification</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Tokens for Line Manager" enabled="true">
                <stringProp name="delimiter">,</stringProp>
                <stringProp name="fileEncoding"></stringProp>
                <stringProp name="filename">${abs_dir_path}${auth_dir_rel_path}${line_manager_tokens_csv}</stringProp>
                <boolProp name="ignoreFirstLine">false</boolProp>
                <boolProp name="quotedData">false</boolProp>
                <boolProp name="recycle">true</boolProp>
                <stringProp name="shareMode">shareMode.all</stringProp>
                <boolProp name="stopThread">false</boolProp>
                <stringProp name="variableNames">Authorization,auth-token,Content-Type,lm_user_name</stringProp>
              </CSVDataSet>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="ApproveLineMangerTokens" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">${Authorization}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">auth-token</stringProp>
                    <stringProp name="Header.value">${auth-token}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">${Content-Type}</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">This will hold Authorization &amp; auth-token</stringProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regex extrct NotficationID" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">notification_id</stringProp>
                <stringProp name="RegexExtractor.regex">notification_id&quot;:[0-9]*</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BshProc NotificationID" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">int notification_id_matchNr = Integer.parseInt(vars.get(&quot;notification_id_matchNr&quot;));
log.info(&quot;notification_id_count:&quot;+notification_id_matchNr);

lm_name = vars.get(&quot;lm_user_name&quot;);
notif_path = vars.get(&quot;abs_dir_path&quot;)+vars.get(&quot;ppsd_leave_rel_path&quot;) + &quot;apply_ppsd_leave_notification_id_&quot;;
f = new FileOutputStream(notif_path + lm_name+&quot;.csv&quot;);
p = new PrintStream(f);
this.interpreter.setOut(p);

for(i=1;i&lt;=notification_id_matchNr;i++)
{
	temp_idx = &quot;notification_id_&quot; + i + &quot;_g0&quot;;
     notif_id_tmp = vars.get(temp_idx).substring(vars.get(temp_idx).indexOf(&quot;:&quot;)+1);
     log.info(&quot;notif_IDS::::&quot;+&quot;COUNT:&quot;+i + &quot;&lt;-&gt;&quot;+notif_id_tmp);
     print(notif_id_tmp + &quot;,&quot;);
}
f.close();






</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion PaidPublicSerivceDuty Leave Task Notification" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message">Get PaidPublicSerivceDuty Leave Task Notification Failed.</stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
              <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
                <boolProp name="ResultCollector.error_logging">false</boolProp>
                <objProp>
                  <name>saveConfig</name>
                  <value class="SampleSaveConfiguration">
                    <time>true</time>
                    <latency>true</latency>
                    <timestamp>true</timestamp>
                    <success>true</success>
                    <label>true</label>
                    <code>true</code>
                    <message>true</message>
                    <threadName>true</threadName>
                    <dataType>true</dataType>
                    <encoding>false</encoding>
                    <assertions>true</assertions>
                    <subresults>true</subresults>
                    <responseData>false</responseData>
                    <samplerData>false</samplerData>
                    <xml>false</xml>
                    <fieldNames>true</fieldNames>
                    <responseHeaders>false</responseHeaders>
                    <requestHeaders>false</requestHeaders>
                    <responseDataOnError>false</responseDataOnError>
                    <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                    <assertionsResultsToSave>0</assertionsResultsToSave>
                    <bytes>true</bytes>
                    <sentBytes>true</sentBytes>
                    <url>true</url>
                    <threadCounts>true</threadCounts>
                    <idleTime>true</idleTime>
                    <connectTime>true</connectTime>
                  </value>
                </objProp>
                <stringProp name="filename"></stringProp>
              </ResultCollector>
              <hashTree/>
              <ResultCollector guiclass="AssertionVisualizer" testclass="ResultCollector" testname="Assertion Results" enabled="true">
                <boolProp name="ResultCollector.error_logging">false</boolProp>
                <objProp>
                  <name>saveConfig</name>
                  <value class="SampleSaveConfiguration">
                    <time>true</time>
                    <latency>true</latency>
                    <timestamp>true</timestamp>
                    <success>true</success>
                    <label>true</label>
                    <code>true</code>
                    <message>true</message>
                    <threadName>true</threadName>
                    <dataType>true</dataType>
                    <encoding>false</encoding>
                    <assertions>true</assertions>
                    <subresults>true</subresults>
                    <responseData>false</responseData>
                    <samplerData>false</samplerData>
                    <xml>false</xml>
                    <fieldNames>true</fieldNames>
                    <responseHeaders>false</responseHeaders>
                    <requestHeaders>false</requestHeaders>
                    <responseDataOnError>false</responseDataOnError>
                    <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                    <assertionsResultsToSave>0</assertionsResultsToSave>
                    <bytes>true</bytes>
                    <sentBytes>true</sentBytes>
                    <url>true</url>
                    <threadCounts>true</threadCounts>
                    <idleTime>true</idleTime>
                    <connectTime>true</connectTime>
                  </value>
                </objProp>
                <stringProp name="filename"></stringProp>
              </ResultCollector>
              <hashTree/>
              <JSR223Listener guiclass="TestBeanGUI" testclass="JSR223Listener" testname="JSR223 Listener" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">import org.apache.jmeter.assertions.AssertionResult;

import java.text.SimpleDateFormat; 
import java.util.Date;
Date date = new Date(); 
SimpleDateFormat df  = new SimpleDateFormat(&quot;MM_dd_yyyy_HH_mm_ss&quot;); 
String formattedDate = df.format(date); 

FileWriter fstream = new FileWriter(vars.get(&quot;abs_result_path&quot;)+&quot;PaidPublicSerivceDuty_Leave_notif_&quot;+formattedDate+&quot;.txt&quot;,true); //Create New file with name &quot;subid&quot;
BufferedWriter out = new BufferedWriter(fstream);

if(prev.isSuccessful())
{
	log.info(&quot;APPLY PaidPublicSerivceDuty LEAVE TASK NOTIF SUCCESSFULLL&quot;);
		prev.setResponseMessage(prev.getResponseDataAsString());
		resp_code = prev.getResponseCode();
		resp_message = resp_code + &quot;&lt;----&gt;&quot;+prev.getResponseDataAsString();
		log.info(&quot;response-code:&quot;+prev.getResponseCode());
		log.info(&quot;response-msg:&quot;+resp_message);
		out.write(resp_message);//insert new line
		out.write(System.getProperty(&quot;line.separator&quot;));//insert new line
	
} else {
	log.info(&quot;APPLY PaidPublicSerivceDuty LEAVE TASK NOTIF NOT SUCCESSFULLL&quot;);
	prev.setResponseMessage(prev.getResponseDataAsString());
     log.info(&quot;response-code:&quot;+prev.getResponseCode());
      AssertionResult[] assertionResults = prev.getAssertionResults();
      for (AssertionResult assertionResult : assertionResults) {
    if (assertionResult.isFailure()) {
        log.info(&quot;assertion is not successful&quot;);
        resp_code = prev.getResponseCode();
      	resp_message = resp_code + &quot;&lt;----&gt;&quot;+prev.getResponseDataAsString();
		log.info(&quot;response-code:&quot;+prev.getResponseCode());
		log.info(&quot;response-msg:&quot;+resp_message);
		out.write(resp_message);//insert new line
		out.write(System.getProperty(&quot;line.separator&quot;));//insert new line
        assertionResult.setFailureMessage(resp_message); // customise
    } 
}
}
out.close();
fstream.close(); 
</stringProp>
                <stringProp name="scriptLanguage">java</stringProp>
              </JSR223Listener>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="ApprovePaidPublicSerivceDutyApplyLeave" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="applyLeaveNotificationcsvFile" elementType="Argument">
              <stringProp name="Argument.name">applyLeaveNotificationcsvFile</stringProp>
              <stringProp name="Argument.value">apply_ppsd_leave_notification_id_</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="lines" elementType="Argument">
              <stringProp name="Argument.name">lines</stringProp>
              <stringProp name="Argument.value">${linesCount}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="FilePath" elementType="Argument">
              <stringProp name="Argument.name">FilePath</stringProp>
              <stringProp name="Argument.value">${approve_ppsd_leave_notif_path}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Tokens for Line Manager" enabled="true">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">${abs_dir_path}${auth_dir_rel_path}${line_manager_tokens_csv}</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames">Authorization,auth-token,Content-Type,lm_user_name</stringProp>
        </CSVDataSet>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler- load CSV to get LineManager TokenCount" enabled="true">
          <stringProp name="BeanShellSampler.query">import java.text.*;
import java.io.*;
import java.util.*;

String temp = null;

ArrayList lines = new ArrayList();

BufferedReader bufRdr;

ArrayList strList = new ArrayList();     

// get the file
try {
	filePath = vars.get(&quot;abs_dir_path&quot;)+vars.get(&quot;auth_dir_rel_path&quot;)+vars.get(&quot;line_manager_tokens_csv&quot;);
	log.info(&quot;FilePath::&quot;+filePath);

	File file = new File(filePath);
     if (!file.exists()) {
        throw new Exception (&quot;ERROR: file -&gt; &quot; + file + &quot;&lt;- not found: not able to load LM tokens for approve leave&quot;);
    }

    bufRdr = new BufferedReader(new InputStreamReader(new FileInputStream(file), &quot;UTF8&quot;));
   
} catch(Exception e){
    log.error(&quot;failed to load file&quot;);
    log.error(e.getMessage());
    return;
}

// For each CSV line, save it to a variable
int counter = 0; int cnt =0;
while(true){
    try{
        temp = bufRdr.readLine();     
	 if(temp == null || temp.equals(&quot;&lt;EOF&gt;&quot;)){
            break;
         }

         cnt = temp.length()-1;     
         lines.add(temp.substring(0,cnt));
  //       vars.put(&quot;csv_line_&quot; + String.valueOf(counter), temp);
        counter++;
           

    } catch(Exception e){
        log.error(&quot;failed to get next line&quot;);
        log.error(e.getMessage());
        break;
    }
}
bufRdr.close();
log.info(&quot;LM-TOKENS::&quot;+lines);

// store the number of CSV lines and data are for the loop counter
vars.put(&quot;lmtokencount&quot;, String.valueOf(lines.size()));

log.info(&quot;lmtokencount:&quot;+vars.get(&quot;lmtokencount&quot;));
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Line Manager Token Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">${lmtokencount}</stringProp>
        </LoopController>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler- load CSV to get Line Count" enabled="true">
            <stringProp name="BeanShellSampler.query">import java.text.*;
import java.io.*;
import java.util.*;

String temp = null;

ArrayList lines = new ArrayList();

BufferedReader bufRdr;

ArrayList strList = new ArrayList();     

String lm_user_name = vars.get(&quot;lm_user_name&quot;);
String filePath = null;
// get the file
try {
	String notif_path = vars.get(&quot;abs_dir_path&quot;)+vars.get(&quot;ppsd_leave_rel_path&quot;) + &quot;apply_ppsd_leave_notification_id_&quot;;
	filePath = notif_path + lm_user_name + &quot;.csv&quot;;
	log.info(&quot;FilePath::&quot;+filePath);

	File file = new File(filePath);
     if (!file.exists()) {
        throw new Exception (&quot;ERROR: file -&gt; &quot; + file + &quot;&lt;- not found: not able to load apply leave notifocations&quot;);
    }

    bufRdr = new BufferedReader(new InputStreamReader(new FileInputStream(file), &quot;UTF8&quot;));
   
} catch(Exception e){
    log.error(&quot;failed to load file&quot;);
    log.error(e.getMessage());
    return;
}

// For each CSV line, save it to a variable
int counter = 0; int cnt =0;
while(true){
    try{
        temp = bufRdr.readLine();     
	 if(temp == null || temp.equals(&quot;&lt;EOF&gt;&quot;)){
            break;
         }

         cnt = temp.length()-1;     
         lines.add(temp.substring(0,cnt));
  //       vars.put(&quot;csv_line_&quot; + String.valueOf(counter), temp);
        counter++;
           

    } catch(Exception e){
        log.error(&quot;failed to get next line&quot;);
        log.error(e.getMessage());
        break;
    }
}
bufRdr.close();
log.info(&quot;APPLY LEAVE NOTIFICATIONS::&quot;+lines);

// store the number of CSV lines and data are for the loop counter
vars.put(&quot;linesCount&quot;, String.valueOf(lines.size()));
vars.put(&quot;approve_ppsd_leave_notif_path&quot;,filePath);
log.info(lm_user_name +&quot; has :&quot;+vars.get(&quot;linesCount&quot;) + &quot;: Notifications&quot;);
log.info(&quot;Notification file_name:&quot;+vars.get(&quot;approve_ppsd_leave_notif_path&quot;));
props.setProperty(&quot;approve_ppsd_leave_noti_path&quot;,filePath);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="ApprovingApplyPaidPublicSerivceDutyLeaveNotificationsLoopController" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">${linesCount}</stringProp>
          </LoopController>
          <hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">5000</stringProp>
            </ConstantTimer>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ApprovePaidPublicSerivceDutyLeave" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;action&quot;: &quot;APPROVED&quot;,&#xd;
  &quot;action_comments&quot;: &quot;approve leave&quot;,&#xd;
  &quot;object_version_number&quot;: 1&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${server}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${leave_uri}/${lm_user_name}/notification/${notif_ID}</stringProp>
              <stringProp name="HTTPSampler.method">PATCH</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">Approving New PaidPublicSerivceDuty leave by Line Manager</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Leave Approve NotifID" enabled="true">
                <stringProp name="filename">${__P(approve_ppsd_leave_noti_path)}</stringProp>
                <stringProp name="fileEncoding"></stringProp>
                <stringProp name="variableNames">notif_ID</stringProp>
                <boolProp name="ignoreFirstLine">false</boolProp>
                <stringProp name="delimiter">,</stringProp>
                <boolProp name="quotedData">false</boolProp>
                <boolProp name="recycle">true</boolProp>
                <boolProp name="stopThread">true</boolProp>
                <stringProp name="shareMode">shareMode.all</stringProp>
              </CSVDataSet>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="ApproveLineMangerTokens" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">${Authorization}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">auth-token</stringProp>
                    <stringProp name="Header.value">${auth-token}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">${Content-Type}</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">This will hold Authorization &amp; auth-token</stringProp>
              </HeaderManager>
              <hashTree/>
              <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
                <boolProp name="ResultCollector.error_logging">false</boolProp>
                <objProp>
                  <name>saveConfig</name>
                  <value class="SampleSaveConfiguration">
                    <time>true</time>
                    <latency>true</latency>
                    <timestamp>true</timestamp>
                    <success>true</success>
                    <label>true</label>
                    <code>true</code>
                    <message>true</message>
                    <threadName>true</threadName>
                    <dataType>true</dataType>
                    <encoding>false</encoding>
                    <assertions>true</assertions>
                    <subresults>true</subresults>
                    <responseData>false</responseData>
                    <samplerData>false</samplerData>
                    <xml>false</xml>
                    <fieldNames>true</fieldNames>
                    <responseHeaders>false</responseHeaders>
                    <requestHeaders>false</requestHeaders>
                    <responseDataOnError>false</responseDataOnError>
                    <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                    <assertionsResultsToSave>0</assertionsResultsToSave>
                    <bytes>true</bytes>
                    <sentBytes>true</sentBytes>
                    <url>true</url>
                    <threadCounts>true</threadCounts>
                    <idleTime>true</idleTime>
                    <connectTime>true</connectTime>
                  </value>
                </objProp>
                <stringProp name="filename"></stringProp>
              </ResultCollector>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Approve PaidPublicSerivceDuty Level Status" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49590">204</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message">Approve PaidPublicSerivceDuty Leave Failed.</stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">3000</stringProp>
              </ConstantTimer>
              <hashTree/>
              <ResultCollector guiclass="AssertionVisualizer" testclass="ResultCollector" testname="Assertion Results" enabled="true">
                <boolProp name="ResultCollector.error_logging">false</boolProp>
                <objProp>
                  <name>saveConfig</name>
                  <value class="SampleSaveConfiguration">
                    <time>true</time>
                    <latency>true</latency>
                    <timestamp>true</timestamp>
                    <success>true</success>
                    <label>true</label>
                    <code>true</code>
                    <message>true</message>
                    <threadName>true</threadName>
                    <dataType>true</dataType>
                    <encoding>false</encoding>
                    <assertions>true</assertions>
                    <subresults>true</subresults>
                    <responseData>false</responseData>
                    <samplerData>false</samplerData>
                    <xml>false</xml>
                    <fieldNames>true</fieldNames>
                    <responseHeaders>false</responseHeaders>
                    <requestHeaders>false</requestHeaders>
                    <responseDataOnError>false</responseDataOnError>
                    <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                    <assertionsResultsToSave>0</assertionsResultsToSave>
                    <bytes>true</bytes>
                    <sentBytes>true</sentBytes>
                    <url>true</url>
                    <threadCounts>true</threadCounts>
                    <idleTime>true</idleTime>
                    <connectTime>true</connectTime>
                  </value>
                </objProp>
                <stringProp name="filename"></stringProp>
              </ResultCollector>
              <hashTree/>
              <JSR223Listener guiclass="TestBeanGUI" testclass="JSR223Listener" testname="JSR223 Listener" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">import org.apache.jmeter.assertions.AssertionResult;
import java.text.SimpleDateFormat; 
import java.util.Date;
Date date = new Date(); 
SimpleDateFormat df  = new SimpleDateFormat(&quot;MM_dd_yyyy_HH_mm_ss&quot;); 
String formattedDate = df.format(date);

FileWriter fstream = new FileWriter(vars.get(&quot;abs_result_path&quot;)+&quot;approve_PaidPublicSerivceDuty_Leave_&quot;+formattedDate+&quot;.txt&quot;,true); //Create New file with name &quot;subid&quot;
BufferedWriter out = new BufferedWriter(fstream);

if(prev.isSuccessful())
{
	log.info(&quot;APPROVE PaidPublicSerivceDuty LEAVE SUCCESSFULLL&quot;);
		prev.setResponseMessage(prev.getResponseDataAsString());
		resp_code = prev.getResponseCode();
		resp_message = resp_code + &quot;&lt;----&gt;&quot;+prev.getResponseDataAsString();
		log.info(&quot;response-code:&quot;+prev.getResponseCode());
		log.info(&quot;response-msg:&quot;+resp_message);
		out.write(resp_message);//insert new line
		out.write(System.getProperty(&quot;line.separator&quot;));//insert new line
	
} else {
	log.info(&quot;APPROVE PaidPublicSerivceDuty LEAVE NOT SUCCESSFULLL&quot;);
	prev.setResponseMessage(prev.getResponseDataAsString());
     log.info(&quot;response-code:&quot;+prev.getResponseCode());
      AssertionResult[] assertionResults = prev.getAssertionResults();
      for (AssertionResult assertionResult : assertionResults) {
    if (assertionResult.isFailure()) {
        log.info(&quot;assertion is not successful&quot;);
        resp_code = prev.getResponseCode();
      	resp_message = resp_code + &quot;&lt;----&gt;&quot;+prev.getResponseDataAsString();
		log.info(&quot;response-code:&quot;+prev.getResponseCode());
		log.info(&quot;response-msg:&quot;+resp_message);
		out.write(resp_message);//insert new line
		out.write(System.getProperty(&quot;line.separator&quot;));//insert new line
        assertionResult.setFailureMessage(resp_message); // customise
    } 
}
}
out.close();
fstream.close(); 
</stringProp>
                <stringProp name="scriptLanguage">java</stringProp>
              </JSR223Listener>
              <hashTree/>
            </hashTree>
          </hashTree>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
        <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="Remove Processed  File-apply_notif_id" enabled="true">
          <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
          <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
          <stringProp name="SystemSampler.command">cmd.exe</stringProp>
          <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">/c del apply_ppsd_leave_notification_id_*.csv</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="SystemSampler.directory">${abs_dir_path}${ppsd_leave_rel_path}</stringProp>
          <longProp name="SystemSampler.timeout">5000</longProp>
        </SystemSampler>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="EditPaidPublicSerivceDutyLeave" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">20</stringProp>
        <stringProp name="ThreadGroup.delay">5</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="editLeavecsvFile" elementType="Argument">
              <stringProp name="Argument.name">editLeavecsvFile</stringProp>
              <stringProp name="Argument.value">edit_ppsd_leave_params.csv</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="editUserFilePath" elementType="Argument">
              <stringProp name="Argument.name">editUserFilePath</stringProp>
              <stringProp name="Argument.value">${user_name}.csv</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler- load CSV to get UserTokenCount" enabled="true">
          <stringProp name="BeanShellSampler.query">import java.text.*;
import java.io.*;
import java.util.*;

String temp = null;

ArrayList lines = new ArrayList();

BufferedReader bufRdr;

ArrayList strList = new ArrayList();     

// get the file
try {
	filePath = vars.get(&quot;abs_dir_path&quot;)+vars.get(&quot;auth_dir_rel_path&quot;)+vars.get(&quot;user_tokens_csv_path&quot;);
	log.info(&quot;FilePath::&quot;+filePath);

	File file = new File(filePath);
     if (!file.exists()) {
        throw new Exception (&quot;ERROR: file -&gt; &quot; + file + &quot;&lt;- not found: Not able to load user tokens for edit leave&quot;);
    }

    bufRdr = new BufferedReader(new InputStreamReader(new FileInputStream(file), &quot;UTF8&quot;));
   
} catch(Exception e){
    log.error(&quot;failed to load file&quot;);
    log.error(e.getMessage());
    return;
}

// For each CSV line, save it to a variable
int counter = 0; int cnt =0;
while(true){
    try{
        temp = bufRdr.readLine();     
	 if(temp == null || temp.equals(&quot;&lt;EOF&gt;&quot;)){
            break;
         }

         cnt = temp.length()-1;     
         lines.add(temp.substring(0,cnt));
  //       vars.put(&quot;csv_line_&quot; + String.valueOf(counter), temp);
        counter++;
           

    } catch(Exception e){
        log.error(&quot;failed to get next line&quot;);
        log.error(e.getMessage());
        break;
    }
}
bufRdr.close();
log.info(&quot;USER-TOKENS::&quot;+lines);

// store the number of CSV lines and data are for the loop counter
vars.put(&quot;usertokencount&quot;, String.valueOf(lines.size()));

log.info(&quot;usertokencount:&quot;+vars.get(&quot;usertokencount&quot;));
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="User Token Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">${usertokencount}</stringProp>
          <stringProp name="TestPlan.comments">Getting user token to edit leave</stringProp>
        </LoopController>
        <hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Tokens for User" enabled="true">
            <stringProp name="delimiter">,</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="filename">${abs_dir_path}${auth_dir_rel_path}${user_tokens_csv_path}</stringProp>
            <boolProp name="ignoreFirstLine">false</boolProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="variableNames">Authorization,auth-token,Content-Type,user_name</stringProp>
          </CSVDataSet>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Auth-Tokens for User" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">${Authorization}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">auth-token</stringProp>
                <stringProp name="Header.value">${auth-token}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">${Content-Type}</stringProp>
              </elementProp>
            </collectionProp>
            <stringProp name="TestPlan.comments">This will hold Authorization &amp; auth-token</stringProp>
          </HeaderManager>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler- load CSV to get Attn_IDS" enabled="true">
            <stringProp name="BeanShellSampler.query">import java.text.*;
import java.io.*;
import java.util.*;

String temp = null;

ArrayList lines = new ArrayList();

BufferedReader bufRdr;

ArrayList strList = new ArrayList();     

String user_name = vars.get(&quot;user_name&quot;);

String filePath = null;
// get the file
try {
	filePath = vars.get(&quot;abs_dir_path&quot;)+vars.get(&quot;ppsd_leave_rel_path&quot;)+&quot;apply_ppsd_leave_attn_ID_&quot; + user_name + &quot;.csv&quot;;
	log.info(&quot;FilePath::&quot;+filePath);

	File file = new File(filePath);
     if (!file.exists()) {
        throw new Exception (&quot;ERROR: file -&gt; &quot; + file + &quot;&lt;- not found: not able to abs attn ID&apos;s for Edit leave&quot;);
    }

    bufRdr = new BufferedReader(new InputStreamReader(new FileInputStream(file), &quot;UTF8&quot;));
   
} catch(Exception e){
    log.error(&quot;failed to load file&quot;);
    log.error(e.getMessage());
    return;
}

// For each CSV line, save it to a variable
int counter = 0; int cnt =0;
while(true){
    try{
        temp = bufRdr.readLine();     
	 if(temp == null || temp.equals(&quot;&lt;EOF&gt;&quot;)){
            break;
         }

         cnt = temp.length()-1;     
         lines.add(temp.substring(0,cnt));
  //       vars.put(&quot;csv_line_&quot; + String.valueOf(counter), temp);
        counter++;
           

    } catch(Exception e){
        log.error(&quot;failed to get next line&quot;);
        log.error(e.getMessage());
        break;
    }
}
bufRdr.close();

log.info(&quot;EDIT-LEAVE-ABS-IDS::&quot;+lines);
//props.setProperty(&quot;edit_ppsd_leave_path&quot;,&quot;&quot;);
// store the number of CSV lines and data are for the loop counter

//vars.put(&quot;edit_ppsd_leave_path&quot;,filePath);
log.info(user_name +&quot; has :&quot;+lines.size() + &quot;: Leaves&quot;);
String[] notif_ids = null;

String attn_ids = lines.toString();
int len = attn_ids.length();
attn_ids = attn_ids.substring(1,len-1);
//log.info(&quot;String-Array:&quot;+attn_ids);
notif_ids = attn_ids.split(&quot;,&quot;);
//log.info(&quot;String-Array:&quot;+notif_ids.length);
for(int i=0;i&lt;notif_ids.length;i++)
{
//	log.info(&quot;ELEMENTS:&quot;+notif_ids[i].trim());
	vars.put(&quot;notif_&quot;+i,notif_ids[i].trim());
}
vars.put(&quot;edit_leave_user_name&quot;,user_name);

for(int i=0;i&lt;notif_ids.length;i++)
{
	log.info(&quot;VAR-ELEMENTS:&quot;+vars.get(&quot;notif_&quot;+i));
	
}</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller- load Attn_IDS and pass to HTTP Request" enabled="true">
            <stringProp name="ForeachController.inputVal">notif</stringProp>
            <stringProp name="ForeachController.returnVal">notif_ID</stringProp>
            <boolProp name="ForeachController.useSeparator">true</boolProp>
            <stringProp name="ForeachController.startIndex">-1</stringProp>
          </ForeachController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="EditPaidPublicSerivceDutyLeave" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;start_date&quot;: &quot;${start_date}&quot;,&#xd;
  &quot;end_date&quot;: &quot;${end_date}&quot;,&#xd;
  &quot;absence_attendance_reason_id&quot;: &quot;${absence_attendance_reason_id}&quot;,&#xd;
  &quot;specific_assignment&quot;: &quot;102821&quot;,&#xd;
  &quot;half_day_on_start_date&quot;: &quot;YES&quot;,&#xd;
  &quot;half_day_on_end_date&quot;: &quot;NO&quot;,&#xd;
  &quot;comments_leave&quot;: &quot;testing for jmeter&quot;,&#xd;
  &quot;comments_approver&quot;: &quot;Approve Jmeter&quot;,&#xd;
  &quot;override_warning&quot;: &quot;YES&quot;,&#xd;
  &quot;object_version_number&quot;: 1&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${server}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${leave_uri}/${edit_leave_user_name}/leave/${notif_ID}</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">Editing approved leave</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set EditPaidPublicSerivceDutyLeave params" enabled="true">
                <stringProp name="filename">${abs_dir_path}${ppsd_leave_rel_path}${editLeavecsvFile}</stringProp>
                <stringProp name="fileEncoding"></stringProp>
                <stringProp name="variableNames">start_date ,end_date ,absence_attendance_reason_id</stringProp>
                <boolProp name="ignoreFirstLine">false</boolProp>
                <stringProp name="delimiter">,</stringProp>
                <boolProp name="quotedData">false</boolProp>
                <boolProp name="recycle">true</boolProp>
                <boolProp name="stopThread">false</boolProp>
                <stringProp name="shareMode">shareMode.all</stringProp>
              </CSVDataSet>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Edit PaidPublicSerivceDuty leave" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1447182349">200|409</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message">Edit PaidPublicSerivceDuty Leave Failed.</stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
              <ResultCollector guiclass="AssertionVisualizer" testclass="ResultCollector" testname="Assertion Results" enabled="true">
                <boolProp name="ResultCollector.error_logging">false</boolProp>
                <objProp>
                  <name>saveConfig</name>
                  <value class="SampleSaveConfiguration">
                    <time>true</time>
                    <latency>true</latency>
                    <timestamp>true</timestamp>
                    <success>true</success>
                    <label>true</label>
                    <code>true</code>
                    <message>true</message>
                    <threadName>true</threadName>
                    <dataType>true</dataType>
                    <encoding>false</encoding>
                    <assertions>true</assertions>
                    <subresults>true</subresults>
                    <responseData>false</responseData>
                    <samplerData>false</samplerData>
                    <xml>false</xml>
                    <fieldNames>true</fieldNames>
                    <responseHeaders>false</responseHeaders>
                    <requestHeaders>false</requestHeaders>
                    <responseDataOnError>false</responseDataOnError>
                    <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                    <assertionsResultsToSave>0</assertionsResultsToSave>
                    <bytes>true</bytes>
                    <sentBytes>true</sentBytes>
                    <url>true</url>
                    <threadCounts>true</threadCounts>
                    <idleTime>true</idleTime>
                    <connectTime>true</connectTime>
                  </value>
                </objProp>
                <stringProp name="filename"></stringProp>
              </ResultCollector>
              <hashTree/>
              <JSR223Listener guiclass="TestBeanGUI" testclass="JSR223Listener" testname="JSR223 Listener" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">import org.apache.jmeter.assertions.AssertionResult;
import java.text.SimpleDateFormat; 
import java.util.Date;
Date date = new Date(); 
SimpleDateFormat df  = new SimpleDateFormat(&quot;MM_dd_yyyy_HH_mm_ss&quot;); 
String formattedDate = df.format(date); 

FileWriter fstream = new FileWriter(vars.get(&quot;abs_result_path&quot;)+&quot;Edit_PaidPublicSerivceDuty_Leave_&quot;+formattedDate+&quot;.txt&quot;,true); //Create New file with name &quot;subid&quot;
BufferedWriter out = new BufferedWriter(fstream);

if(prev.isSuccessful())
{
	log.info(&quot;EDIT PaidPublicSerivceDuty LEAVE SUCCESSFULLL&quot;);
		prev.setResponseMessage(prev.getResponseDataAsString());
		resp_code = prev.getResponseCode();
		resp_message = resp_code + &quot;&lt;----&gt;&quot;+prev.getResponseDataAsString();
		log.info(&quot;response-code:&quot;+prev.getResponseCode());
		log.info(&quot;response-msg:&quot;+resp_message);
		out.write(resp_message);//insert new line
		out.write(System.getProperty(&quot;line.separator&quot;));//insert new line
	
} else {
	log.info(&quot;EDIT PaidPublicSerivceDuty LEAVE NOT SUCCESSFULLL&quot;);
	prev.setResponseMessage(prev.getResponseDataAsString());
     log.info(&quot;response-code:&quot;+prev.getResponseCode());
      AssertionResult[] assertionResults = prev.getAssertionResults();
      for (AssertionResult assertionResult : assertionResults) {
    if (assertionResult.isFailure()) {
        log.info(&quot;assertion is not successful&quot;);
        resp_code = prev.getResponseCode();
      	resp_message = resp_code + &quot;&lt;----&gt;&quot;+prev.getResponseDataAsString();
		log.info(&quot;response-code:&quot;+prev.getResponseCode());
		log.info(&quot;response-msg:&quot;+resp_message);
		out.write(resp_message);//insert new line
		out.write(System.getProperty(&quot;line.separator&quot;));//insert new line
        assertionResult.setFailureMessage(resp_message); // customise
    } 
}
}
out.close();
fstream.close(); 
</stringProp>
                <stringProp name="scriptLanguage">java</stringProp>
              </JSR223Listener>
              <hashTree/>
              <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Edit PaidPublicSerivceDuty Results" enabled="true">
                <boolProp name="ResultCollector.error_logging">false</boolProp>
                <objProp>
                  <name>saveConfig</name>
                  <value class="SampleSaveConfiguration">
                    <time>true</time>
                    <latency>true</latency>
                    <timestamp>true</timestamp>
                    <success>true</success>
                    <label>true</label>
                    <code>true</code>
                    <message>true</message>
                    <threadName>true</threadName>
                    <dataType>true</dataType>
                    <encoding>false</encoding>
                    <assertions>true</assertions>
                    <subresults>true</subresults>
                    <responseData>false</responseData>
                    <samplerData>false</samplerData>
                    <xml>false</xml>
                    <fieldNames>true</fieldNames>
                    <responseHeaders>false</responseHeaders>
                    <requestHeaders>false</requestHeaders>
                    <responseDataOnError>false</responseDataOnError>
                    <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                    <assertionsResultsToSave>0</assertionsResultsToSave>
                    <bytes>true</bytes>
                    <sentBytes>true</sentBytes>
                    <url>true</url>
                    <threadCounts>true</threadCounts>
                    <idleTime>true</idleTime>
                    <connectTime>true</connectTime>
                  </value>
                </objProp>
                <stringProp name="filename"></stringProp>
              </ResultCollector>
              <hashTree/>
            </hashTree>
          </hashTree>
          <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="user token Debug Sampler" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugSampler>
          <hashTree/>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Edit PaidPublicSerivceDuty leave Main Thread Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="EditPaidPublicSerivceDutyLeaveTaskNotification" enabled="false">
        <stringProp name="TestPlan.comments">Getting apply PaidPublicSerivceDuty leave task notification</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler- load CSV to get LineManager TokenCount" enabled="true">
          <stringProp name="BeanShellSampler.query">import java.text.*;
import java.io.*;
import java.util.*;

String temp = null;

ArrayList lines = new ArrayList();

BufferedReader bufRdr;

ArrayList strList = new ArrayList();     

// get the file
try {
	filePath = vars.get(&quot;abs_dir_path&quot;)+vars.get(&quot;auth_dir_rel_path&quot;)+vars.get(&quot;line_manager_creds_csv&quot;);
	log.info(&quot;FilePath::&quot;+filePath);

	File file = new File(filePath);
     if (!file.exists()) {
        throw new Exception (&quot;ERROR: file -&gt; &quot; + file + &quot;&lt;- not found: not able to LM tokens for edit leave task notif&quot;);
    }

    bufRdr = new BufferedReader(new InputStreamReader(new FileInputStream(file), &quot;UTF8&quot;));
   
} catch(Exception e){
    log.error(&quot;failed to load file&quot;);
    log.error(e.getMessage());
    return;
}

// For each CSV line, save it to a variable
int counter = 0; int cnt =0;
while(true){
    try{
        temp = bufRdr.readLine();     
	 if(temp == null || temp.equals(&quot;&lt;EOF&gt;&quot;)){
            break;
         }

         cnt = temp.length()-1;     
         lines.add(temp.substring(0,cnt));
  //       vars.put(&quot;csv_line_&quot; + String.valueOf(counter), temp);
        counter++;
           

    } catch(Exception e){
        log.error(&quot;failed to get next line&quot;);
        log.error(e.getMessage());
        break;
    }
}
bufRdr.close();
log.info(&quot;LM-TOKENS::&quot;+lines);

// store the number of CSV lines and data are for the loop counter
vars.put(&quot;lmtokencount&quot;, String.valueOf(lines.size()));

log.info(&quot;lmtokencount:&quot;+vars.get(&quot;lmtokencount&quot;));
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Line Manager Token Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">${lmtokencount}</stringProp>
        </LoopController>
        <hashTree>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="FettchingEditTaskNotificationLoopController" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">1</stringProp>
          </LoopController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetEditPaidPublicSerivceDutyLeaveTaskNotification" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="nid_type" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">TASKS</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">nid_type</stringProp>
                  </elementProp>
                  <elementProp name="status" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">OPEN</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">status</stringProp>
                  </elementProp>
                  <elementProp name="offset" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">offset</stringProp>
                  </elementProp>
                  <elementProp name="limit" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">50</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">limit</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${server}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${leave_uri}/${lm_user_name}/notification</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Tokens for Line Manager" enabled="true">
                <stringProp name="delimiter">,</stringProp>
                <stringProp name="fileEncoding"></stringProp>
                <stringProp name="filename">${abs_dir_path}${auth_dir_rel_path}${line_manager_tokens_csv}</stringProp>
                <boolProp name="ignoreFirstLine">false</boolProp>
                <boolProp name="quotedData">false</boolProp>
                <boolProp name="recycle">true</boolProp>
                <stringProp name="shareMode">shareMode.all</stringProp>
                <boolProp name="stopThread">false</boolProp>
                <stringProp name="variableNames">Authorization,auth-token,Content-Type,lm_user_name</stringProp>
              </CSVDataSet>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="ApproveLineMangerTokens" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">${Authorization}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">auth-token</stringProp>
                    <stringProp name="Header.value">${auth-token}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">${Content-Type}</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">This will hold Authorization &amp; auth-token</stringProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regex extrct NotficationID" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">notification_id</stringProp>
                <stringProp name="RegexExtractor.regex">notification_id&quot;:[0-9]*</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BshProc NotificationID" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">int notification_id_matchNr = Integer.parseInt(vars.get(&quot;notification_id_matchNr&quot;));
log.info(&quot;notification_id_count:&quot;+notification_id_matchNr);

lm_name = vars.get(&quot;lm_user_name&quot;);
notif_path = vars.get(&quot;abs_dir_path&quot;)+vars.get(&quot;ppsd_leave_rel_path&quot;) + &quot;edit_ppsd_leave_notification_id_&quot;;

f = new FileOutputStream(notif_path + lm_name+&quot;.csv&quot;);
p = new PrintStream(f);
this.interpreter.setOut(p);

for(i=1;i&lt;=notification_id_matchNr;i++)
{
	temp_idx = &quot;notification_id_&quot; + i + &quot;_g0&quot;;
     notif_id_tmp = vars.get(temp_idx).substring(vars.get(temp_idx).indexOf(&quot;:&quot;)+1);
     log.info(&quot;notif_IDS::::&quot;+&quot;COUNT:&quot;+i + &quot;&lt;-&gt;&quot;+notif_id_tmp);
     print(notif_id_tmp + &quot;,&quot;);
}
f.close();






</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion PaidPublicSerivceDutyt Task Notification" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message">Get PaidPublicSerivceDuty Leave Task Notification Failed.</stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
              <ResultCollector guiclass="AssertionVisualizer" testclass="ResultCollector" testname="Assertion Results" enabled="true">
                <boolProp name="ResultCollector.error_logging">false</boolProp>
                <objProp>
                  <name>saveConfig</name>
                  <value class="SampleSaveConfiguration">
                    <time>true</time>
                    <latency>true</latency>
                    <timestamp>true</timestamp>
                    <success>true</success>
                    <label>true</label>
                    <code>true</code>
                    <message>true</message>
                    <threadName>true</threadName>
                    <dataType>true</dataType>
                    <encoding>false</encoding>
                    <assertions>true</assertions>
                    <subresults>true</subresults>
                    <responseData>false</responseData>
                    <samplerData>false</samplerData>
                    <xml>false</xml>
                    <fieldNames>true</fieldNames>
                    <responseHeaders>false</responseHeaders>
                    <requestHeaders>false</requestHeaders>
                    <responseDataOnError>false</responseDataOnError>
                    <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                    <assertionsResultsToSave>0</assertionsResultsToSave>
                    <bytes>true</bytes>
                    <sentBytes>true</sentBytes>
                    <url>true</url>
                    <threadCounts>true</threadCounts>
                    <idleTime>true</idleTime>
                    <connectTime>true</connectTime>
                  </value>
                </objProp>
                <stringProp name="filename"></stringProp>
              </ResultCollector>
              <hashTree/>
              <JSR223Listener guiclass="TestBeanGUI" testclass="JSR223Listener" testname="JSR223 Listener" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">import org.apache.jmeter.assertions.AssertionResult;
import java.text.SimpleDateFormat; 
import java.util.Date;
Date date = new Date(); 
SimpleDateFormat df  = new SimpleDateFormat(&quot;MM_dd_yyyy_HH_mm_ss&quot;); 
String formattedDate = df.format(date); 

FileWriter fstream = new FileWriter(vars.get(&quot;abs_result_path&quot;)+&quot;Edit_PaidPublicSerivceDuty_Leave_notif_&quot;+formattedDate+&quot;.txt&quot;,true); //Create New file with name &quot;subid&quot;
BufferedWriter out = new BufferedWriter(fstream);

if(prev.isSuccessful())
{
	log.info(&quot;EDIT PaidPublicSerivceDuty LEAVE TASK NOTIF SUCCESSFULLL&quot;);
		prev.setResponseMessage(prev.getResponseDataAsString());
		resp_code = prev.getResponseCode();
		resp_message = resp_code + &quot;&lt;----&gt;&quot;+prev.getResponseDataAsString();
		log.info(&quot;response-code:&quot;+prev.getResponseCode());
		log.info(&quot;response-msg:&quot;+resp_message);
		out.write(resp_message);//insert new line
		out.write(System.getProperty(&quot;line.separator&quot;));//insert new line
	
} else {
	log.info(&quot;EDIT PaidPublicSerivceDuty LEAVE TASK NOTIF NOT SUCCESSFULLL&quot;);
	prev.setResponseMessage(prev.getResponseDataAsString());
     log.info(&quot;response-code:&quot;+prev.getResponseCode());
      AssertionResult[] assertionResults = prev.getAssertionResults();
      for (AssertionResult assertionResult : assertionResults) {
    if (assertionResult.isFailure()) {
        log.info(&quot;assertion is not successful&quot;);
        resp_code = prev.getResponseCode();
      	resp_message = resp_code + &quot;&lt;----&gt;&quot;+prev.getResponseDataAsString();
		log.info(&quot;response-code:&quot;+prev.getResponseCode());
		log.info(&quot;response-msg:&quot;+resp_message);
		out.write(resp_message);//insert new line
		out.write(System.getProperty(&quot;line.separator&quot;));//insert new line
        assertionResult.setFailureMessage(resp_message); // customise
    } 
}
}
out.close();
fstream.close(); 
</stringProp>
                <stringProp name="scriptLanguage">java</stringProp>
              </JSR223Listener>
              <hashTree/>
              <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
                <boolProp name="ResultCollector.error_logging">false</boolProp>
                <objProp>
                  <name>saveConfig</name>
                  <value class="SampleSaveConfiguration">
                    <time>true</time>
                    <latency>true</latency>
                    <timestamp>true</timestamp>
                    <success>true</success>
                    <label>true</label>
                    <code>true</code>
                    <message>true</message>
                    <threadName>true</threadName>
                    <dataType>true</dataType>
                    <encoding>false</encoding>
                    <assertions>true</assertions>
                    <subresults>true</subresults>
                    <responseData>false</responseData>
                    <samplerData>false</samplerData>
                    <xml>false</xml>
                    <fieldNames>true</fieldNames>
                    <responseHeaders>false</responseHeaders>
                    <requestHeaders>false</requestHeaders>
                    <responseDataOnError>false</responseDataOnError>
                    <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                    <assertionsResultsToSave>0</assertionsResultsToSave>
                    <bytes>true</bytes>
                    <sentBytes>true</sentBytes>
                    <url>true</url>
                    <threadCounts>true</threadCounts>
                    <idleTime>true</idleTime>
                    <connectTime>true</connectTime>
                  </value>
                </objProp>
                <stringProp name="filename"></stringProp>
              </ResultCollector>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="ApproveEditPaidPublicSerivceDutyLeave" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="lines" elementType="Argument">
              <stringProp name="Argument.name">lines</stringProp>
              <stringProp name="Argument.value">${linesCount}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Tokens for Line Manager" enabled="true">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">${abs_dir_path}${auth_dir_rel_path}${line_manager_tokens_csv}</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames">Authorization,auth-token,Content-Type,lm_user_name</stringProp>
        </CSVDataSet>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler- load CSV to get LineManager TokenCount" enabled="true">
          <stringProp name="BeanShellSampler.query">import java.text.*;
import java.io.*;
import java.util.*;

String temp = null;

ArrayList lines = new ArrayList();

BufferedReader bufRdr;

ArrayList strList = new ArrayList();     

// get the file
try {
	filePath = vars.get(&quot;abs_dir_path&quot;)+vars.get(&quot;auth_dir_rel_path&quot;)+vars.get(&quot;line_manager_creds_csv&quot;);
	log.info(&quot;FilePath::&quot;+filePath);

	File file = new File(filePath);
     if (!file.exists()) {
        throw new Exception (&quot;ERROR: file -&gt; &quot; + file + &quot;&lt;- not found: not able to LM tokens for approve edit leave&quot;);
    }

    bufRdr = new BufferedReader(new InputStreamReader(new FileInputStream(file), &quot;UTF8&quot;));
   
} catch(Exception e){
    log.error(&quot;failed to load file&quot;);
    log.error(e.getMessage());
    return;
}

// For each CSV line, save it to a variable
int counter = 0; int cnt =0;
while(true){
    try{
        temp = bufRdr.readLine();     
	 if(temp == null || temp.equals(&quot;&lt;EOF&gt;&quot;)){
            break;
         }

         cnt = temp.length()-1;     
         lines.add(temp.substring(0,cnt));
  //       vars.put(&quot;csv_line_&quot; + String.valueOf(counter), temp);
        counter++;
           

    } catch(Exception e){
        log.error(&quot;failed to get next line&quot;);
        log.error(e.getMessage());
        break;
    }
}
bufRdr.close();
log.info(&quot;LM-TOKENS::&quot;+lines);

// store the number of CSV lines and data are for the loop counter
vars.put(&quot;lmtokencount&quot;, String.valueOf(lines.size()));

log.info(&quot;lmtokencount:&quot;+vars.get(&quot;lmtokencount&quot;));
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Line Manager Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">${lmtokencount}</stringProp>
        </LoopController>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler- load CSV to get Line Count" enabled="true">
            <stringProp name="BeanShellSampler.query">import java.text.*;
import java.io.*;
import java.util.*;

String temp = null;

ArrayList lines = new ArrayList();

BufferedReader bufRdr;

ArrayList strList = new ArrayList();     

String lm_user_name = vars.get(&quot;lm_user_name&quot;);
String filePath = null;
// get the file
try {
	String notif_path = vars.get(&quot;abs_dir_path&quot;)+vars.get(&quot;ppsd_leave_rel_path&quot;) + &quot;edit_ppsd_leave_notification_id_&quot;;
	filePath = notif_path + lm_user_name + &quot;.csv&quot;;
	log.info(&quot;FilePath::&quot;+filePath);

	File file = new File(filePath);
     if (!file.exists()) {
        throw new Exception (&quot;ERROR: file -&gt; &quot; + file + &quot;&lt;- not found: not able to load edit leave task notif&quot;);
    }

    bufRdr = new BufferedReader(new InputStreamReader(new FileInputStream(file), &quot;UTF8&quot;));
   
} catch(Exception e){
    log.error(&quot;failed to load file&quot;);
    log.error(e.getMessage());
    return;
}

// For each CSV line, save it to a variable
int counter = 0; int cnt =0;
while(true){
    try{
        temp = bufRdr.readLine();     
	 if(temp == null || temp.equals(&quot;&lt;EOF&gt;&quot;)){
            break;
         }

         cnt = temp.length()-1;     
         lines.add(temp.substring(0,cnt));
  //       vars.put(&quot;csv_line_&quot; + String.valueOf(counter), temp);
        counter++;
           

    } catch(Exception e){
        log.error(&quot;failed to get next line&quot;);
        log.error(e.getMessage());
        break;
    }
}
bufRdr.close();
log.info(&quot;EDIT-LEAVE-TASK-NOTIFS::&quot;+lines);

// store the number of CSV lines and data are for the loop counter
vars.put(&quot;linesCount&quot;, String.valueOf(lines.size()));
vars.put(&quot;edit_ppsd_leave_notif_path&quot;,filePath);
log.info(lm_user_name +&quot; has :&quot;+vars.get(&quot;linesCount&quot;) + &quot;: Notifications&quot;);
log.info(&quot;Notification file_name:&quot;+vars.get(&quot;edit_ppsd_leave_notif_path&quot;));
props.setProperty(&quot;edit_ppsd_leave_noti_path&quot;,filePath);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Approve Edit PaidPublicSerivceDuty Leave Loop Controller" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">${linesCount}</stringProp>
          </LoopController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ApprovePaidPublicSerivceDutyEditLeave" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;action&quot;: &quot;APPROVED&quot;,&#xd;
  &quot;action_comments&quot;: &quot;approve leave&quot;,&#xd;
  &quot;object_version_number&quot;: 1&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${server}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${leave_uri}/${lm_user_name}/notification/${notif_ID}</stringProp>
              <stringProp name="HTTPSampler.method">PATCH</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">Approving Edit PaidPublicSerivceDuty leave by Line Manager</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">5000</stringProp>
              </ConstantTimer>
              <hashTree/>
              <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Leave Approve NotifID" enabled="true">
                <stringProp name="filename">${__P(edit_ppsd_leave_noti_path)}</stringProp>
                <stringProp name="fileEncoding"></stringProp>
                <stringProp name="variableNames">notif_ID</stringProp>
                <boolProp name="ignoreFirstLine">false</boolProp>
                <stringProp name="delimiter">,</stringProp>
                <boolProp name="quotedData">false</boolProp>
                <boolProp name="recycle">true</boolProp>
                <boolProp name="stopThread">true</boolProp>
                <stringProp name="shareMode">shareMode.all</stringProp>
              </CSVDataSet>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="ApproveLineMangerTokens" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">${Authorization}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">auth-token</stringProp>
                    <stringProp name="Header.value">${auth-token}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">${Content-Type}</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">This will hold Authorization &amp; auth-token</stringProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Approve PaidPublicSerivceDuty Level Status" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49590">204</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message">Approve PaidPublicSerivceDuty Leave Failed.</stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
              <ResultCollector guiclass="AssertionVisualizer" testclass="ResultCollector" testname="Assertion Results" enabled="true">
                <boolProp name="ResultCollector.error_logging">false</boolProp>
                <objProp>
                  <name>saveConfig</name>
                  <value class="SampleSaveConfiguration">
                    <time>true</time>
                    <latency>true</latency>
                    <timestamp>true</timestamp>
                    <success>true</success>
                    <label>true</label>
                    <code>true</code>
                    <message>true</message>
                    <threadName>true</threadName>
                    <dataType>true</dataType>
                    <encoding>false</encoding>
                    <assertions>true</assertions>
                    <subresults>true</subresults>
                    <responseData>false</responseData>
                    <samplerData>false</samplerData>
                    <xml>false</xml>
                    <fieldNames>true</fieldNames>
                    <responseHeaders>false</responseHeaders>
                    <requestHeaders>false</requestHeaders>
                    <responseDataOnError>false</responseDataOnError>
                    <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                    <assertionsResultsToSave>0</assertionsResultsToSave>
                    <bytes>true</bytes>
                    <sentBytes>true</sentBytes>
                    <url>true</url>
                    <threadCounts>true</threadCounts>
                    <idleTime>true</idleTime>
                    <connectTime>true</connectTime>
                  </value>
                </objProp>
                <stringProp name="filename"></stringProp>
              </ResultCollector>
              <hashTree/>
              <JSR223Listener guiclass="TestBeanGUI" testclass="JSR223Listener" testname="JSR223 Listener" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">import org.apache.jmeter.assertions.AssertionResult;
import java.text.SimpleDateFormat; 
import java.util.Date;
Date date = new Date(); 
SimpleDateFormat df  = new SimpleDateFormat(&quot;MM_dd_yyyy_HH_mm_ss&quot;); 
String formattedDate = df.format(date);

FileWriter fstream = new FileWriter(vars.get(&quot;abs_result_path&quot;)+&quot;approve_edit_PaidPublicSerivceDuty_Leave_&quot;+formattedDate+&quot;.txt&quot;,true); //Create New file with name &quot;subid&quot;
BufferedWriter out = new BufferedWriter(fstream);

if(prev.isSuccessful())
{
	log.info(&quot;EDIT PaidPublicSerivceDuty LEAVE APPROVAL SUCCESSFULLL&quot;);
		prev.setResponseMessage(prev.getResponseDataAsString());
		resp_code = prev.getResponseCode();
		resp_message = resp_code + &quot;&lt;----&gt;&quot;+prev.getResponseDataAsString();
		log.info(&quot;response-code:&quot;+prev.getResponseCode());
		log.info(&quot;response-msg:&quot;+resp_message);
		out.write(resp_message);//insert new line
		out.write(System.getProperty(&quot;line.separator&quot;));//insert new line
	
} else {
	log.info(&quot;EDIT PaidPublicSerivceDuty LEAVE APPROVAL NOT SUCCESSFULLL&quot;);
	prev.setResponseMessage(prev.getResponseDataAsString());
     log.info(&quot;response-code:&quot;+prev.getResponseCode());
      AssertionResult[] assertionResults = prev.getAssertionResults();
      for (AssertionResult assertionResult : assertionResults) {
    if (assertionResult.isFailure()) {
        log.info(&quot;assertion is not successful&quot;);
        resp_code = prev.getResponseCode();
      	resp_message = resp_code + &quot;&lt;----&gt;&quot;+prev.getResponseDataAsString();
		log.info(&quot;response-code:&quot;+prev.getResponseCode());
		log.info(&quot;response-msg:&quot;+resp_message);
		out.write(resp_message);//insert new line
		out.write(System.getProperty(&quot;line.separator&quot;));//insert new line
        assertionResult.setFailureMessage(resp_message); // customise
    } 
}
}
out.close();
fstream.close(); 
</stringProp>
                <stringProp name="scriptLanguage">java</stringProp>
              </JSR223Listener>
              <hashTree/>
              <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
                <boolProp name="ResultCollector.error_logging">false</boolProp>
                <objProp>
                  <name>saveConfig</name>
                  <value class="SampleSaveConfiguration">
                    <time>true</time>
                    <latency>true</latency>
                    <timestamp>true</timestamp>
                    <success>true</success>
                    <label>true</label>
                    <code>true</code>
                    <message>true</message>
                    <threadName>true</threadName>
                    <dataType>true</dataType>
                    <encoding>false</encoding>
                    <assertions>true</assertions>
                    <subresults>true</subresults>
                    <responseData>false</responseData>
                    <samplerData>false</samplerData>
                    <xml>false</xml>
                    <fieldNames>true</fieldNames>
                    <responseHeaders>false</responseHeaders>
                    <requestHeaders>false</requestHeaders>
                    <responseDataOnError>false</responseDataOnError>
                    <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                    <assertionsResultsToSave>0</assertionsResultsToSave>
                    <bytes>true</bytes>
                    <sentBytes>true</sentBytes>
                    <url>true</url>
                    <threadCounts>true</threadCounts>
                    <idleTime>true</idleTime>
                    <connectTime>true</connectTime>
                  </value>
                </objProp>
                <stringProp name="filename"></stringProp>
              </ResultCollector>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="Remove Processed  File-edit_notif_id" enabled="true">
          <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
          <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
          <stringProp name="SystemSampler.command">cmd.exe</stringProp>
          <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">/c del edit_ppsd_leave_notification_id_*.csv</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="SystemSampler.directory">${abs_dir_path}${ppsd_leave_rel_path}</stringProp>
          <longProp name="SystemSampler.timeout">5000</longProp>
        </SystemSampler>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="CancelPaidPublicSerivceDutyLeave" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments"/>
        </Arguments>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler- load CSV to get UserTokenCount" enabled="true">
          <stringProp name="BeanShellSampler.query">import java.text.*;
import java.io.*;
import java.util.*;

String temp = null;

ArrayList lines = new ArrayList();

BufferedReader bufRdr;

ArrayList strList = new ArrayList();     

// get the file
try {
	filePath = vars.get(&quot;abs_dir_path&quot;)+vars.get(&quot;auth_dir_rel_path&quot;)+vars.get(&quot;user_tokens_csv_path&quot;);
	log.info(&quot;FilePath::&quot;+filePath);

	File file = new File(filePath);
     if (!file.exists()) {
        throw new Exception (&quot;ERROR: file -&gt; &quot; + file + &quot;&lt;- not found: not able to load user tokens for cancel leave&quot;);
    }

    bufRdr = new BufferedReader(new InputStreamReader(new FileInputStream(file), &quot;UTF8&quot;));
   
} catch(Exception e){
    log.error(&quot;failed to load file&quot;);
    log.error(e.getMessage());
    return;
}

// For each CSV line, save it to a variable
int counter = 0; int cnt =0;
while(true){
    try{
        temp = bufRdr.readLine();     
	 if(temp == null || temp.equals(&quot;&lt;EOF&gt;&quot;)){
            break;
         }

         cnt = temp.length()-1;     
         lines.add(temp.substring(0,cnt));
  //       vars.put(&quot;csv_line_&quot; + String.valueOf(counter), temp);
        counter++;
           

    } catch(Exception e){
        log.error(&quot;failed to get next line&quot;);
        log.error(e.getMessage());
        break;
    }
}
bufRdr.close();
log.info(&quot;USER-TOKENS::&quot;+lines);

// store the number of CSV lines and data are for the loop counter
vars.put(&quot;usertokencount&quot;, String.valueOf(lines.size()));

log.info(&quot;usertokencount:&quot;+vars.get(&quot;usertokencount&quot;));
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="User Token Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">${usertokencount}</stringProp>
        </LoopController>
        <hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Tokens for User" enabled="true">
            <stringProp name="delimiter">,</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="filename">${abs_dir_path}${auth_dir_rel_path}${user_tokens_csv_path}</stringProp>
            <boolProp name="ignoreFirstLine">false</boolProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="variableNames">Authorization,auth-token,Content-Type,user_name</stringProp>
          </CSVDataSet>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Auth-Tokens for User" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">${Authorization}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">auth-token</stringProp>
                <stringProp name="Header.value">${auth-token}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">${Content-Type}</stringProp>
              </elementProp>
            </collectionProp>
            <stringProp name="TestPlan.comments">This will hold Authorization &amp; auth-token</stringProp>
          </HeaderManager>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler- load CSV to get Attn_IDS" enabled="true">
            <stringProp name="BeanShellSampler.query">import java.text.*;
import java.io.*;
import java.util.*;

String temp = null;

ArrayList lines = new ArrayList();

BufferedReader bufRdr;

ArrayList strList = new ArrayList();     

String user_name = vars.get(&quot;user_name&quot;);

String filePath = null;
// get the file
try {
	filePath = vars.get(&quot;abs_dir_path&quot;)+vars.get(&quot;ppsd_leave_rel_path&quot;)+&quot;apply_ppsd_leave_attn_ID_&quot; + user_name + &quot;.csv&quot;;
	//filePath = vars.get(&quot;attnIdcsvFilePath&quot;) + user_name + &quot;.csv&quot;;
	log.info(&quot;FilePath::&quot;+filePath);

	File file = new File(filePath);
     if (!file.exists()) {
        throw new Exception (&quot;ERROR: file -&gt; &quot; + file + &quot;&lt;- not found: not able to load ABS ATTN IDS for cancel leave&quot;);
    }

    bufRdr = new BufferedReader(new InputStreamReader(new FileInputStream(file), &quot;UTF8&quot;));
   
} catch(Exception e){
    log.error(&quot;failed to load file&quot;);
    log.error(e.getMessage());
    return;
}

// For each CSV line, save it to a variable
int counter = 0; int cnt =0;
while(true){
    try{
        temp = bufRdr.readLine();     
	 if(temp == null || temp.equals(&quot;&lt;EOF&gt;&quot;)){
            break;
         }

         cnt = temp.length()-1;     
         lines.add(temp.substring(0,cnt));
  //       vars.put(&quot;csv_line_&quot; + String.valueOf(counter), temp);
        counter++;
           

    } catch(Exception e){
        log.error(&quot;failed to get next line&quot;);
        log.error(e.getMessage());
        break;
    }
}
bufRdr.close();

log.info(&quot;CANCEL-LEAVE-ABS-ATTN-IDS::&quot;+lines);
//props.setProperty(&quot;edit_ppsd_leave_path&quot;,&quot;&quot;);
// store the number of CSV lines and data are for the loop counter

//vars.put(&quot;edit_ppsd_leave_path&quot;,filePath);
log.info(user_name +&quot; has :&quot;+lines.size() + &quot;: Leaves&quot;);
String[] notif_ids = null;

String attn_ids = lines.toString();
int len = attn_ids.length();
attn_ids = attn_ids.substring(1,len-1);
//log.info(&quot;String-Array:&quot;+attn_ids);
notif_ids = attn_ids.split(&quot;,&quot;);
//log.info(&quot;String-Array:&quot;+notif_ids.length);
for(int i=0;i&lt;notif_ids.length;i++)
{
//	log.info(&quot;ELEMENTS:&quot;+notif_ids[i].trim());
	vars.put(&quot;notif_&quot;+i,notif_ids[i].trim());
}
vars.put(&quot;cancel_leave_user_name&quot;,user_name);

for(int i=0;i&lt;notif_ids.length;i++)
{
	log.info(&quot;VAR-ELEMENTS:&quot;+vars.get(&quot;notif_&quot;+i));
	
}</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller- load Attn_IDS and pass to HTTP Request" enabled="true">
            <stringProp name="ForeachController.inputVal">notif</stringProp>
            <stringProp name="ForeachController.returnVal">notif_ID</stringProp>
            <boolProp name="ForeachController.useSeparator">true</boolProp>
            <stringProp name="ForeachController.startIndex">-1</stringProp>
          </ForeachController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CancelPaidPublicSerivceDutyLeave" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;comments_leave&quot;: &quot;Jmeter Cancel Leave Request&quot;,&#xd;
  &quot;comments_approver&quot;: &quot;Jmeter Cancel Leave Request&quot;,&#xd;
  &quot;object_version_number&quot;: 1&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${server}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${leave_uri}/${cancel_leave_user_name}/leave/${notif_ID}</stringProp>
              <stringProp name="HTTPSampler.method">PATCH</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">Cancel approved leave</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Cancel PaidPublicSerivceDuty leave" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1447182349">200|409</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message">Edit PaidPublicSerivceDuty Leave Failed.</stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
              <ResultCollector guiclass="AssertionVisualizer" testclass="ResultCollector" testname="Assertion Results" enabled="true">
                <boolProp name="ResultCollector.error_logging">false</boolProp>
                <objProp>
                  <name>saveConfig</name>
                  <value class="SampleSaveConfiguration">
                    <time>true</time>
                    <latency>true</latency>
                    <timestamp>true</timestamp>
                    <success>true</success>
                    <label>true</label>
                    <code>true</code>
                    <message>true</message>
                    <threadName>true</threadName>
                    <dataType>true</dataType>
                    <encoding>false</encoding>
                    <assertions>true</assertions>
                    <subresults>true</subresults>
                    <responseData>false</responseData>
                    <samplerData>false</samplerData>
                    <xml>false</xml>
                    <fieldNames>true</fieldNames>
                    <responseHeaders>false</responseHeaders>
                    <requestHeaders>false</requestHeaders>
                    <responseDataOnError>false</responseDataOnError>
                    <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                    <assertionsResultsToSave>0</assertionsResultsToSave>
                    <bytes>true</bytes>
                    <sentBytes>true</sentBytes>
                    <url>true</url>
                    <threadCounts>true</threadCounts>
                    <idleTime>true</idleTime>
                    <connectTime>true</connectTime>
                  </value>
                </objProp>
                <stringProp name="filename"></stringProp>
              </ResultCollector>
              <hashTree/>
              <JSR223Listener guiclass="TestBeanGUI" testclass="JSR223Listener" testname="JSR223 Listener" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">import org.apache.jmeter.assertions.AssertionResult;
import java.text.SimpleDateFormat; 
import java.util.Date;
Date date = new Date(); 
SimpleDateFormat df  = new SimpleDateFormat(&quot;MM_dd_yyyy_HH_mm_ss&quot;); 
String formattedDate = df.format(date); 
FileWriter fstream = new FileWriter(vars.get(&quot;abs_result_path&quot;) +&quot;Cancel_ppsd_Leave_&quot;+formattedDate+&quot;.txt&quot;,true); //Create New file with name &quot;subid&quot;
BufferedWriter out = new BufferedWriter(fstream);

if(prev.isSuccessful())
{
	log.info(&quot;CANCEL PaidPublicSerivceDuty LEAVE SUCCESSFULLL&quot;);
		prev.setResponseMessage(prev.getResponseDataAsString());
		resp_code = prev.getResponseCode();
		resp_message = resp_code + &quot;&lt;----&gt;&quot;+prev.getResponseDataAsString();
		log.info(&quot;response-code:&quot;+prev.getResponseCode());
		log.info(&quot;response-msg:&quot;+resp_message);
		out.write(resp_message);//insert new line
		out.write(System.getProperty(&quot;line.separator&quot;));//insert new line
	
} else {
	log.info(&quot;CANCEL PaidPublicSerivceDuty LEAVE NOT SUCCESSFULLL&quot;);
	prev.setResponseMessage(prev.getResponseDataAsString());
     log.info(&quot;response-code:&quot;+prev.getResponseCode());
      AssertionResult[] assertionResults = prev.getAssertionResults();
      for (AssertionResult assertionResult : assertionResults) {
    if (assertionResult.isFailure()) {
        log.info(&quot;assertion is not successful&quot;);
        resp_code = prev.getResponseCode();
      	resp_message = resp_code + &quot;&lt;----&gt;&quot;+prev.getResponseDataAsString();
		log.info(&quot;response-code:&quot;+prev.getResponseCode());
		log.info(&quot;response-msg:&quot;+resp_message);
		out.write(resp_message);//insert new line
		out.write(System.getProperty(&quot;line.separator&quot;));//insert new line
        assertionResult.setFailureMessage(resp_message); // customise
    } 
}
}
out.close();
fstream.close(); 
</stringProp>
                <stringProp name="scriptLanguage">java</stringProp>
              </JSR223Listener>
              <hashTree/>
              <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Cancel PaidPublicSerivceDuty Results" enabled="true">
                <boolProp name="ResultCollector.error_logging">false</boolProp>
                <objProp>
                  <name>saveConfig</name>
                  <value class="SampleSaveConfiguration">
                    <time>true</time>
                    <latency>true</latency>
                    <timestamp>true</timestamp>
                    <success>true</success>
                    <label>true</label>
                    <code>true</code>
                    <message>true</message>
                    <threadName>true</threadName>
                    <dataType>true</dataType>
                    <encoding>false</encoding>
                    <assertions>true</assertions>
                    <subresults>true</subresults>
                    <responseData>false</responseData>
                    <samplerData>false</samplerData>
                    <xml>false</xml>
                    <fieldNames>true</fieldNames>
                    <responseHeaders>false</responseHeaders>
                    <requestHeaders>false</requestHeaders>
                    <responseDataOnError>false</responseDataOnError>
                    <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                    <assertionsResultsToSave>0</assertionsResultsToSave>
                    <bytes>true</bytes>
                    <sentBytes>true</sentBytes>
                    <url>true</url>
                    <threadCounts>true</threadCounts>
                    <idleTime>true</idleTime>
                    <connectTime>true</connectTime>
                  </value>
                </objProp>
                <stringProp name="filename"></stringProp>
              </ResultCollector>
              <hashTree/>
            </hashTree>
          </hashTree>
          <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="user token Debug Sampler" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugSampler>
          <hashTree/>
        </hashTree>
        <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="Remove Processed  File-User tokens" enabled="true">
          <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
          <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
          <stringProp name="SystemSampler.command">cmd.exe</stringProp>
          <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">/c del user_tokens.csv</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="SystemSampler.directory">${abs_dir_path}${auth_dir_rel_path}</stringProp>
          <longProp name="SystemSampler.timeout">5000</longProp>
        </SystemSampler>
        <hashTree/>
        <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="Remove Processed  File-Apply Attn ID" enabled="true">
          <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
          <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
          <stringProp name="SystemSampler.command">cmd.exe</stringProp>
          <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">/c del apply_ppsd_leave_attn_ID_*.csv</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="SystemSampler.directory">${abs_dir_path}${ppsd_leave_rel_path}</stringProp>
          <longProp name="SystemSampler.timeout">5000</longProp>
        </SystemSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="CancePaidPublicSerivceDutyTaskNotification" enabled="false">
        <stringProp name="TestPlan.comments">Getting cancel PaidPublicSerivceDuty leave task notification</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler- load CSV to get LineManager TokenCount" enabled="true">
          <stringProp name="BeanShellSampler.query">import java.text.*;
import java.io.*;
import java.util.*;

String temp = null;

ArrayList lines = new ArrayList();

BufferedReader bufRdr;

ArrayList strList = new ArrayList();     

// get the file
try {
	filePath = vars.get(&quot;abs_dir_path&quot;)+vars.get(&quot;auth_dir_rel_path&quot;)+vars.get(&quot;line_manager_creds_csv&quot;);
	log.info(&quot;FilePath::&quot;+filePath);

	File file = new File(filePath);
     if (!file.exists()) {
        throw new Exception (&quot;ERROR: file -&gt; &quot; + file + &quot;&lt;- not found: not able to load LM token for cancel leave Notif&quot;);
    }

    bufRdr = new BufferedReader(new InputStreamReader(new FileInputStream(file), &quot;UTF8&quot;));
   
} catch(Exception e){
    log.error(&quot;failed to load file&quot;);
    log.error(e.getMessage());
    return;
}

// For each CSV line, save it to a variable
int counter = 0; int cnt =0;
while(true){
    try{
        temp = bufRdr.readLine();     
	 if(temp == null || temp.equals(&quot;&lt;EOF&gt;&quot;)){
            break;
         }

         cnt = temp.length()-1;     
         lines.add(temp.substring(0,cnt));
  //       vars.put(&quot;csv_line_&quot; + String.valueOf(counter), temp);
        counter++;
           

    } catch(Exception e){
        log.error(&quot;failed to get next line&quot;);
        log.error(e.getMessage());
        break;
    }
}
bufRdr.close();
log.info(&quot;LM-TOKENS::&quot;+lines);

// store the number of CSV lines and data are for the loop counter
vars.put(&quot;lmtokencount&quot;, String.valueOf(lines.size()));

log.info(&quot;lmtokencount:&quot;+vars.get(&quot;lmtokencount&quot;));
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Line Manager Token Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">${lmtokencount}</stringProp>
        </LoopController>
        <hashTree>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller- get Cancel Leave Notif" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">1</stringProp>
          </LoopController>
          <hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">5000</stringProp>
            </ConstantTimer>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetCancelPaidPublicSerivceDutyNotification" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="nid_type" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">TASKS</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">nid_type</stringProp>
                  </elementProp>
                  <elementProp name="status" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">OPEN</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">status</stringProp>
                  </elementProp>
                  <elementProp name="offset" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">offset</stringProp>
                  </elementProp>
                  <elementProp name="limit" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">50</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">limit</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${server}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${leave_uri}/${lm_user_name}/notification</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Tokens for Line Manager" enabled="true">
                <stringProp name="delimiter">,</stringProp>
                <stringProp name="fileEncoding"></stringProp>
                <stringProp name="filename">${abs_dir_path}${auth_dir_rel_path}${line_manager_tokens_csv}</stringProp>
                <boolProp name="ignoreFirstLine">false</boolProp>
                <boolProp name="quotedData">false</boolProp>
                <boolProp name="recycle">true</boolProp>
                <stringProp name="shareMode">shareMode.all</stringProp>
                <boolProp name="stopThread">false</boolProp>
                <stringProp name="variableNames">Authorization,auth-token,Content-Type,lm_user_name</stringProp>
              </CSVDataSet>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="ApproveLineMangerTokens" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">${Authorization}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">auth-token</stringProp>
                    <stringProp name="Header.value">${auth-token}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">${Content-Type}</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">This will hold Authorization &amp; auth-token</stringProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regex extrct NotficationID" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">notification_id</stringProp>
                <stringProp name="RegexExtractor.regex">notification_id&quot;:[0-9]*</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BshProc NotificationID" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">int notification_id_matchNr = Integer.parseInt(vars.get(&quot;notification_id_matchNr&quot;));
log.info(&quot;notification_id_count:&quot;+notification_id_matchNr);

lm_name = vars.get(&quot;lm_user_name&quot;);
notif_path = vars.get(&quot;abs_dir_path&quot;)+vars.get(&quot;ppsd_leave_rel_path&quot;) + &quot;cancel_ppsd_leave_notification_id_&quot;;
f = new FileOutputStream(notif_path + lm_name+&quot;.csv&quot;);
p = new PrintStream(f);
this.interpreter.setOut(p);

for(i=1;i&lt;=notification_id_matchNr;i++)
{
	temp_idx = &quot;notification_id_&quot; + i + &quot;_g0&quot;;
     notif_id_tmp = vars.get(temp_idx).substring(vars.get(temp_idx).indexOf(&quot;:&quot;)+1);
     log.info(&quot;notif_IDS::::&quot;+&quot;COUNT:&quot;+i + &quot;&lt;-&gt;&quot;+notif_id_tmp);
     print(notif_id_tmp + &quot;,&quot;);
}
f.close();






</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion Cancel PaidPublicSerivceDuty Leave Task Notification" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message">Get PaidPublicSerivceDuty Leave Task Notification Failed.</stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
              <ResultCollector guiclass="AssertionVisualizer" testclass="ResultCollector" testname="Assertion Results" enabled="true">
                <boolProp name="ResultCollector.error_logging">false</boolProp>
                <objProp>
                  <name>saveConfig</name>
                  <value class="SampleSaveConfiguration">
                    <time>true</time>
                    <latency>true</latency>
                    <timestamp>true</timestamp>
                    <success>true</success>
                    <label>true</label>
                    <code>true</code>
                    <message>true</message>
                    <threadName>true</threadName>
                    <dataType>true</dataType>
                    <encoding>false</encoding>
                    <assertions>true</assertions>
                    <subresults>true</subresults>
                    <responseData>false</responseData>
                    <samplerData>false</samplerData>
                    <xml>false</xml>
                    <fieldNames>true</fieldNames>
                    <responseHeaders>false</responseHeaders>
                    <requestHeaders>false</requestHeaders>
                    <responseDataOnError>false</responseDataOnError>
                    <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                    <assertionsResultsToSave>0</assertionsResultsToSave>
                    <bytes>true</bytes>
                    <sentBytes>true</sentBytes>
                    <url>true</url>
                    <threadCounts>true</threadCounts>
                    <idleTime>true</idleTime>
                    <connectTime>true</connectTime>
                  </value>
                </objProp>
                <stringProp name="filename"></stringProp>
              </ResultCollector>
              <hashTree/>
              <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
                <boolProp name="ResultCollector.error_logging">false</boolProp>
                <objProp>
                  <name>saveConfig</name>
                  <value class="SampleSaveConfiguration">
                    <time>true</time>
                    <latency>true</latency>
                    <timestamp>true</timestamp>
                    <success>true</success>
                    <label>true</label>
                    <code>true</code>
                    <message>true</message>
                    <threadName>true</threadName>
                    <dataType>true</dataType>
                    <encoding>false</encoding>
                    <assertions>true</assertions>
                    <subresults>true</subresults>
                    <responseData>false</responseData>
                    <samplerData>false</samplerData>
                    <xml>false</xml>
                    <fieldNames>true</fieldNames>
                    <responseHeaders>false</responseHeaders>
                    <requestHeaders>false</requestHeaders>
                    <responseDataOnError>false</responseDataOnError>
                    <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                    <assertionsResultsToSave>0</assertionsResultsToSave>
                    <bytes>true</bytes>
                    <sentBytes>true</sentBytes>
                    <url>true</url>
                    <threadCounts>true</threadCounts>
                    <idleTime>true</idleTime>
                    <connectTime>true</connectTime>
                  </value>
                </objProp>
                <stringProp name="filename"></stringProp>
              </ResultCollector>
              <hashTree/>
              <JSR223Listener guiclass="TestBeanGUI" testclass="JSR223Listener" testname="JSR223 Listener" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">import org.apache.jmeter.assertions.AssertionResult;

import java.text.SimpleDateFormat; 
import java.util.Date;
Date date = new Date(); 
SimpleDateFormat df  = new SimpleDateFormat(&quot;MM_dd_yyyy_HH_mm_ss&quot;); 
String formattedDate = df.format(date); 

FileWriter fstream = new FileWriter(vars.get(&quot;abs_result_path&quot;)+&quot;cancel_PaidPublicSerivceDuty_Leave_notif_&quot;+formattedDate+&quot;.txt&quot;,true); //Create New file with name &quot;subid&quot;
BufferedWriter out = new BufferedWriter(fstream);

if(prev.isSuccessful())
{
	log.info(&quot;CANCEL PaidPublicSerivceDuty LEAVE NOTIF SUCCESSFULLL&quot;);
		prev.setResponseMessage(prev.getResponseDataAsString());
		resp_code = prev.getResponseCode();
		resp_message = resp_code + &quot;&lt;----&gt;&quot;+prev.getResponseDataAsString();
		log.info(&quot;response-code:&quot;+prev.getResponseCode());
		log.info(&quot;response-msg:&quot;+resp_message);
		out.write(resp_message);//insert new line
		out.write(System.getProperty(&quot;line.separator&quot;));//insert new line
	
} else {
	log.info(&quot;CANCEL PaidPublicSerivceDuty LEAVE NOTIF NOT SUCCESSFULLL&quot;);
	prev.setResponseMessage(prev.getResponseDataAsString());
     log.info(&quot;response-code:&quot;+prev.getResponseCode());
      AssertionResult[] assertionResults = prev.getAssertionResults();
      for (AssertionResult assertionResult : assertionResults) {
    if (assertionResult.isFailure()) {
        log.info(&quot;assertion is not successful&quot;);
        resp_code = prev.getResponseCode();
      	resp_message = resp_code + &quot;&lt;----&gt;&quot;+prev.getResponseDataAsString();
		log.info(&quot;response-code:&quot;+prev.getResponseCode());
		log.info(&quot;response-msg:&quot;+resp_message);
		out.write(resp_message);//insert new line
		out.write(System.getProperty(&quot;line.separator&quot;));//insert new line
        assertionResult.setFailureMessage(resp_message); // customise
    } 
}
}
out.close();
fstream.close(); 
</stringProp>
                <stringProp name="scriptLanguage">java</stringProp>
              </JSR223Listener>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="RejectPaidPublicSerivceDutyCancelLeave" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="lines" elementType="Argument">
              <stringProp name="Argument.name">lines</stringProp>
              <stringProp name="Argument.value">${linesCount}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Tokens for Line Manager" enabled="true">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">${abs_dir_path}${auth_dir_rel_path}${line_manager_tokens_csv}</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames">Authorization,auth-token,Content-Type,lm_user_name</stringProp>
        </CSVDataSet>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler- load CSV to get LineManager TokenCount" enabled="true">
          <stringProp name="BeanShellSampler.query">import java.text.*;
import java.io.*;
import java.util.*;

String temp = null;

ArrayList lines = new ArrayList();

BufferedReader bufRdr;

ArrayList strList = new ArrayList();     

// get the file
try {
	filePath = vars.get(&quot;abs_dir_path&quot;)+vars.get(&quot;auth_dir_rel_path&quot;)+vars.get(&quot;line_manager_creds_csv&quot;);
	log.info(&quot;FilePath::&quot;+filePath);

	File file = new File(filePath);
     if (!file.exists()) {
        throw new Exception (&quot;ERROR: file -&gt; &quot; + file + &quot;&lt;- not found:not able to load LM tokens to approve cancel leave&quot;);
    }

    bufRdr = new BufferedReader(new InputStreamReader(new FileInputStream(file), &quot;UTF8&quot;));
   
} catch(Exception e){
    log.error(&quot;failed to load file&quot;);
    log.error(e.getMessage());
    return;
}

// For each CSV line, save it to a variable
int counter = 0; int cnt =0;
while(true){
    try{
        temp = bufRdr.readLine();     
	 if(temp == null || temp.equals(&quot;&lt;EOF&gt;&quot;)){
            break;
         }

         cnt = temp.length()-1;     
         lines.add(temp.substring(0,cnt));
  //       vars.put(&quot;csv_line_&quot; + String.valueOf(counter), temp);
        counter++;
           

    } catch(Exception e){
        log.error(&quot;failed to get next line&quot;);
        log.error(e.getMessage());
        break;
    }
}
bufRdr.close();
log.info(&quot;LM-TOKENS::&quot;+lines);

// store the number of CSV lines and data are for the loop counter
vars.put(&quot;lmtokencount&quot;, String.valueOf(lines.size()));

log.info(&quot;lmtokencount:&quot;+vars.get(&quot;lmtokencount&quot;));
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller- Rejectcancel leave" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">${lmtokencount}</stringProp>
        </LoopController>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler- load CSV to get Line Count" enabled="true">
            <stringProp name="BeanShellSampler.query">import java.text.*;
import java.io.*;
import java.util.*;

String temp = null;

ArrayList lines = new ArrayList();

BufferedReader bufRdr;

ArrayList strList = new ArrayList();     

String lm_user_name = vars.get(&quot;lm_user_name&quot;);
String filePath = null;
// get the file
try {
	String notif_path = vars.get(&quot;abs_dir_path&quot;)+vars.get(&quot;pb_leave_rel_path&quot;) + &quot;cancel_pb_leave_notification_id_&quot;;
	filePath = notif_path + lm_user_name + &quot;.csv&quot;;
	log.info(&quot;FilePath::&quot;+filePath);

	File file = new File(filePath);
     if (!file.exists()) {
        throw new Exception (&quot;ERROR: file -&gt; &quot; + file + &quot;&lt;- not found: not able to load cancel leave NOTIFS for approval&quot;);
    }

    bufRdr = new BufferedReader(new InputStreamReader(new FileInputStream(file), &quot;UTF8&quot;));
   
} catch(Exception e){
    log.error(&quot;failed to load file&quot;);
    log.error(e.getMessage());
    return;
}

// For each CSV line, save it to a variable
int counter = 0; int cnt =0;
while(true){
    try{
        temp = bufRdr.readLine();     
	 if(temp == null || temp.equals(&quot;&lt;EOF&gt;&quot;)){
            break;
         }

         cnt = temp.length()-1;     
         lines.add(temp.substring(0,cnt));
  //       vars.put(&quot;csv_line_&quot; + String.valueOf(counter), temp);
        counter++;
           

    } catch(Exception e){
        log.error(&quot;failed to get next line&quot;);
        log.error(e.getMessage());
        break;
    }
}
bufRdr.close();
log.info(&quot;DATA::&quot;+lines);

// store the number of CSV lines and data are for the loop counter
vars.put(&quot;linesCount&quot;, String.valueOf(lines.size()));
vars.put(&quot;cancel_pb_leave_notif_path&quot;,filePath);
log.info(lm_user_name +&quot; has :&quot;+vars.get(&quot;linesCount&quot;) + &quot;: Notifications&quot;);
log.info(&quot;Notification file_name:&quot;+vars.get(&quot;cancel_pb_leave_notif_path&quot;));
props.setProperty(&quot;cancel_pb_leave_noti_path&quot;,filePath);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller- reject cancel leave" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">${linesCount}</stringProp>
          </LoopController>
          <hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">5000</stringProp>
            </ConstantTimer>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RejectCancelPaidPublicSerivceDutyLeave" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;action&quot;: &quot;REJECTED&quot;,&#xd;
  &quot;action_comments&quot;: &quot;Reject leave&quot;,&#xd;
  &quot;object_version_number&quot;: 1&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${server}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${leave_uri}/${lm_user_name}/notification/${notif_ID}</stringProp>
              <stringProp name="HTTPSampler.method">PATCH</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">Rejecting Cancel PaidPublicSerivceDuty leave by Line Manager</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Leave Reject NotifID" enabled="true">
                <stringProp name="filename">${__P(cancel_ppsd_leave_noti_path)}</stringProp>
                <stringProp name="fileEncoding"></stringProp>
                <stringProp name="variableNames">notif_ID</stringProp>
                <boolProp name="ignoreFirstLine">false</boolProp>
                <stringProp name="delimiter">,</stringProp>
                <boolProp name="quotedData">false</boolProp>
                <boolProp name="recycle">true</boolProp>
                <boolProp name="stopThread">true</boolProp>
                <stringProp name="shareMode">shareMode.all</stringProp>
              </CSVDataSet>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="RejectLineMangerTokens" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">${Authorization}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">auth-token</stringProp>
                    <stringProp name="Header.value">${auth-token}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">${Content-Type}</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">This will hold Authorization &amp; auth-token</stringProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Reject Cancel PaidPublicSerivceDuty  Level Status" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49590">204</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message">Reject PaidPublicSerivceDuty Leave Failed.</stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
              <ResultCollector guiclass="AssertionVisualizer" testclass="ResultCollector" testname="Assertion Results" enabled="true">
                <boolProp name="ResultCollector.error_logging">false</boolProp>
                <objProp>
                  <name>saveConfig</name>
                  <value class="SampleSaveConfiguration">
                    <time>true</time>
                    <latency>true</latency>
                    <timestamp>true</timestamp>
                    <success>true</success>
                    <label>true</label>
                    <code>true</code>
                    <message>true</message>
                    <threadName>true</threadName>
                    <dataType>true</dataType>
                    <encoding>false</encoding>
                    <assertions>true</assertions>
                    <subresults>true</subresults>
                    <responseData>false</responseData>
                    <samplerData>false</samplerData>
                    <xml>false</xml>
                    <fieldNames>true</fieldNames>
                    <responseHeaders>false</responseHeaders>
                    <requestHeaders>false</requestHeaders>
                    <responseDataOnError>false</responseDataOnError>
                    <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                    <assertionsResultsToSave>0</assertionsResultsToSave>
                    <bytes>true</bytes>
                    <sentBytes>true</sentBytes>
                    <url>true</url>
                    <threadCounts>true</threadCounts>
                    <idleTime>true</idleTime>
                    <connectTime>true</connectTime>
                  </value>
                </objProp>
                <stringProp name="filename"></stringProp>
              </ResultCollector>
              <hashTree/>
              <JSR223Listener guiclass="TestBeanGUI" testclass="JSR223Listener" testname="JSR223 Listener" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">import org.apache.jmeter.assertions.AssertionResult;
import java.text.SimpleDateFormat; 
import java.util.Date;
Date date = new Date(); 
SimpleDateFormat df  = new SimpleDateFormat(&quot;MM_dd_yyyy_HH_mm_ss&quot;); 
String formattedDate = df.format(date);

FileWriter fstream = new FileWriter(vars.get(&quot;abs_result_path&quot;)+&quot;Reject_PaidPublicSerivceDuty_Leave_&quot;+formattedDate+&quot;.txt&quot;,true); //Create New file with name &quot;subid&quot;
BufferedWriter out = new BufferedWriter(fstream);

if(prev.isSuccessful())
{
	log.info(&quot;REJECT PaidPublicSerivceDuty CANCEL LEAVE SUCCESSFULLL&quot;);
		prev.setResponseMessage(prev.getResponseDataAsString());
		resp_code = prev.getResponseCode();
		resp_message = resp_code + &quot;&lt;----&gt;&quot;+prev.getResponseDataAsString();
		log.info(&quot;response-code:&quot;+prev.getResponseCode());
		log.info(&quot;response-msg:&quot;+resp_message);
		out.write(resp_message);//insert new line
		out.write(System.getProperty(&quot;line.separator&quot;));//insert new line
	
} else {
	log.info(&quot;REJECT CANCEL PaidPublicSerivceDuty LEAVE NOT SUCCESSFULLL&quot;);
	prev.setResponseMessage(prev.getResponseDataAsString());
     log.info(&quot;response-code:&quot;+prev.getResponseCode());
      AssertionResult[] assertionResults = prev.getAssertionResults();
      for (AssertionResult assertionResult : assertionResults) {
    if (assertionResult.isFailure()) {
        log.info(&quot;assertion is not successful&quot;);
        resp_code = prev.getResponseCode();
      	resp_message = resp_code + &quot;&lt;----&gt;&quot;+prev.getResponseDataAsString();
		log.info(&quot;response-code:&quot;+prev.getResponseCode());
		log.info(&quot;response-msg:&quot;+resp_message);
		out.write(resp_message);//insert new line
		out.write(System.getProperty(&quot;line.separator&quot;));//insert new line
        assertionResult.setFailureMessage(resp_message); // customise
    } 
}
}
out.close();
fstream.close(); 
</stringProp>
                <stringProp name="scriptLanguage">java</stringProp>
              </JSR223Listener>
              <hashTree/>
              <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
                <boolProp name="ResultCollector.error_logging">false</boolProp>
                <objProp>
                  <name>saveConfig</name>
                  <value class="SampleSaveConfiguration">
                    <time>true</time>
                    <latency>true</latency>
                    <timestamp>true</timestamp>
                    <success>true</success>
                    <label>true</label>
                    <code>true</code>
                    <message>true</message>
                    <threadName>true</threadName>
                    <dataType>true</dataType>
                    <encoding>false</encoding>
                    <assertions>true</assertions>
                    <subresults>true</subresults>
                    <responseData>false</responseData>
                    <samplerData>false</samplerData>
                    <xml>false</xml>
                    <fieldNames>true</fieldNames>
                    <responseHeaders>false</responseHeaders>
                    <requestHeaders>false</requestHeaders>
                    <responseDataOnError>false</responseDataOnError>
                    <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                    <assertionsResultsToSave>0</assertionsResultsToSave>
                    <bytes>true</bytes>
                    <sentBytes>true</sentBytes>
                    <url>true</url>
                    <threadCounts>true</threadCounts>
                    <idleTime>true</idleTime>
                    <connectTime>true</connectTime>
                  </value>
                </objProp>
                <stringProp name="filename"></stringProp>
              </ResultCollector>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="Remove Processed  File-cancel_notif_id" enabled="true">
          <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
          <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
          <stringProp name="SystemSampler.command">cmd.exe</stringProp>
          <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">/c del cancel_ppsd_leave_notification_id_*.csv</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="SystemSampler.directory">${abs_dir_path}${ppsd_leave_rel_path}</stringProp>
          <longProp name="SystemSampler.timeout">5000</longProp>
        </SystemSampler>
        <hashTree/>
        <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="Remove Processed  File-line manager tokens" enabled="true">
          <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
          <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
          <stringProp name="SystemSampler.command">cmd.exe</stringProp>
          <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">/c del line_manager_tokens.csv</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="SystemSampler.directory">${abs_dir_path}${auth_dir_rel_path}</stringProp>
          <longProp name="SystemSampler.timeout">5000</longProp>
        </SystemSampler>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>true</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename">${abs_result_path}PaidPublicSerivceDuty_AggregateResults_${__time(MM-dd-yyyy-HH-mm-ss,)}.csv</stringProp>
        <boolProp name="useGroupName">true</boolProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="SimpleDataWriter" testclass="ResultCollector" testname="Will log all Thread Group Results" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>true</responseHeaders>
            <requestHeaders>true</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <sampleCount>true</sampleCount>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename">${abs_result_path}PaidPublicSerivceDutys_FinalResult_${__time(MM-dd-yyyy-HH-mm-ss,)}.csv</stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename">${abs_result_path}PaidPublicSerivceDuty_SummaryResults_${__time(MM-dd-yyyy-HH-mm-ss,)}.csv</stringProp>
        <boolProp name="useGroupName">true</boolProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
